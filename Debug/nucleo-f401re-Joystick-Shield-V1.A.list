
nucleo-f401re-Joystick-Shield-V1.A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004168  08004168  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004170  08004170  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004174  08004174  00014174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  080041e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  080041e8  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000984b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001955  00000000  00000000  000298eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000860  00000000  00000000  0002b240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002baa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000161bd  00000000  00000000  0002c228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000079b6  00000000  00000000  000423e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089ab8  00000000  00000000  00049d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3853  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002474  00000000  00000000  000d38d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004058 	.word	0x08004058

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004058 	.word	0x08004058

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09c      	sub	sp, #112	; 0x70
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fc13 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f83b 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f94f 	bl	8000840 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 f92d 	bl	8000800 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f901 	bl	80007ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005aa:	f000 f89f 	bl	80006ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, JoystickBuffer, 2);
 80005ae:	2202      	movs	r2, #2
 80005b0:	4913      	ldr	r1, [pc, #76]	; (8000600 <main+0x70>)
 80005b2:	4814      	ldr	r0, [pc, #80]	; (8000604 <main+0x74>)
 80005b4:	f000 fe1c 	bl	80011f0 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(E_Button_GPIO_Port, E_Button_Pin) == GPIO_PIN_RESET)
 80005b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005bc:	4812      	ldr	r0, [pc, #72]	; (8000608 <main+0x78>)
 80005be:	f001 ffb5 	bl	800252c <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d106      	bne.n	80005d6 <main+0x46>
	  {
		  Print("Button E pressed!\n");
 80005c8:	4810      	ldr	r0, [pc, #64]	; (800060c <main+0x7c>)
 80005ca:	f000 f9cf 	bl	800096c <Print>
		  HAL_Delay(1000);
 80005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d2:	f000 fc67 	bl	8000ea4 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	char str[100];
		snprintf(str, 100, "X: %lu\n Y: %lu\n", JoystickBuffer[0], JoystickBuffer[1]);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x70>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <main+0x70>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	1d38      	adds	r0, r7, #4
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	4613      	mov	r3, r2
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <main+0x80>)
 80005e6:	2164      	movs	r1, #100	; 0x64
 80005e8:	f003 f91c 	bl	8003824 <sniprintf>
		Print(str);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f9bc 	bl	800096c <Print>
		HAL_Delay(5000);
 80005f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80005f8:	f000 fc54 	bl	8000ea4 <HAL_Delay>
  {
 80005fc:	e7dc      	b.n	80005b8 <main+0x28>
 80005fe:	bf00      	nop
 8000600:	200000e0 	.word	0x200000e0
 8000604:	20000098 	.word	0x20000098
 8000608:	40020400 	.word	0x40020400
 800060c:	08004070 	.word	0x08004070
 8000610:	08004084 	.word	0x08004084

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 f8f6 	bl	8003814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <SystemClock_Config+0xd0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a28      	ldr	r2, [pc, #160]	; (80006e4 <SystemClock_Config+0xd0>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SystemClock_Config+0xd0>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemClock_Config+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd4>)
 8000662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000688:	2310      	movs	r3, #16
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800068c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000692:	2304      	movs	r3, #4
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000696:	2307      	movs	r3, #7
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 ff80 	bl	80025a4 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006aa:	f000 f97f 	bl	80009ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 f9da 	bl	8002a84 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006d6:	f000 f969 	bl	80009ac <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fe:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <MX_ADC1_Init+0xb4>)
 8000700:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <MX_ADC1_Init+0xb8>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <MX_ADC1_Init+0xb4>)
 8000706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800070a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <MX_ADC1_Init+0xb4>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_ADC1_Init+0xb4>)
 8000714:	2201      	movs	r2, #1
 8000716:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000718:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_ADC1_Init+0xb4>)
 800071a:	2201      	movs	r2, #1
 800071c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_ADC1_Init+0xb4>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_ADC1_Init+0xb4>)
 8000728:	2200      	movs	r2, #0
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_ADC1_Init+0xb4>)
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <MX_ADC1_Init+0xbc>)
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_ADC1_Init+0xb4>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_ADC1_Init+0xb4>)
 800073a:	2202      	movs	r2, #2
 800073c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_ADC1_Init+0xb4>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_ADC1_Init+0xb4>)
 8000748:	2201      	movs	r2, #1
 800074a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074c:	4814      	ldr	r0, [pc, #80]	; (80007a0 <MX_ADC1_Init+0xb4>)
 800074e:	f000 fbcb 	bl	8000ee8 <HAL_ADC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000758:	f000 f928 	bl	80009ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800075c:	2300      	movs	r3, #0
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000764:	2307      	movs	r3, #7
 8000766:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_ADC1_Init+0xb4>)
 800076e:	f000 fe31 	bl	80013d4 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000778:	f000 f918 	bl	80009ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800077c:	2301      	movs	r3, #1
 800077e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_ADC1_Init+0xb4>)
 800078a:	f000 fe23 	bl	80013d4 <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000794:	f000 f90a 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000098 	.word	0x20000098
 80007a4:	40012000 	.word	0x40012000
 80007a8:	0f000001 	.word	0x0f000001

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_USART2_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f002 fb40 	bl	8002e68 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f8dd 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000148 	.word	0x20000148
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_DMA_Init+0x3c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <MX_DMA_Init+0x3c>)
 8000810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_DMA_Init+0x3c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2038      	movs	r0, #56	; 0x38
 8000828:	f001 f959 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800082c:	2038      	movs	r0, #56	; 0x38
 800082e:	f001 f972 	bl	8001b16 <HAL_NVIC_EnableIRQ>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b40      	ldr	r3, [pc, #256]	; (800095c <MX_GPIO_Init+0x11c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a3f      	ldr	r2, [pc, #252]	; (800095c <MX_GPIO_Init+0x11c>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b3d      	ldr	r3, [pc, #244]	; (800095c <MX_GPIO_Init+0x11c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b39      	ldr	r3, [pc, #228]	; (800095c <MX_GPIO_Init+0x11c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a38      	ldr	r2, [pc, #224]	; (800095c <MX_GPIO_Init+0x11c>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b36      	ldr	r3, [pc, #216]	; (800095c <MX_GPIO_Init+0x11c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b32      	ldr	r3, [pc, #200]	; (800095c <MX_GPIO_Init+0x11c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a31      	ldr	r2, [pc, #196]	; (800095c <MX_GPIO_Init+0x11c>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b2f      	ldr	r3, [pc, #188]	; (800095c <MX_GPIO_Init+0x11c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <MX_GPIO_Init+0x11c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a2a      	ldr	r2, [pc, #168]	; (800095c <MX_GPIO_Init+0x11c>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_GPIO_Init+0x11c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : E_Button_Pin */
  GPIO_InitStruct.Pin = E_Button_Pin;
 80008c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E_Button_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4821      	ldr	r0, [pc, #132]	; (8000960 <MX_GPIO_Init+0x120>)
 80008dc:	f001 fca4 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_Button_Pin Joystick_Button_Pin A_Button_Pin */
  GPIO_InitStruct.Pin = F_Button_Pin|Joystick_Button_Pin|A_Button_Pin;
 80008e0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_GPIO_Init+0x124>)
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	481c      	ldr	r0, [pc, #112]	; (8000968 <MX_GPIO_Init+0x128>)
 80008f6:	f001 fc97 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Button_Pin D_Button_Pin C_Button_Pin */
  GPIO_InitStruct.Pin = B_Button_Pin|D_Button_Pin|C_Button_Pin;
 80008fa:	2338      	movs	r3, #56	; 0x38
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_GPIO_Init+0x124>)
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4814      	ldr	r0, [pc, #80]	; (8000960 <MX_GPIO_Init+0x120>)
 800090e:	f001 fc8b 	bl	8002228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2101      	movs	r1, #1
 8000916:	2009      	movs	r0, #9
 8000918:	f001 f8e1 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800091c:	2009      	movs	r0, #9
 800091e:	f001 f8fa 	bl	8001b16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2101      	movs	r1, #1
 8000926:	200a      	movs	r0, #10
 8000928:	f001 f8d9 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800092c:	200a      	movs	r0, #10
 800092e:	f001 f8f2 	bl	8001b16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2101      	movs	r1, #1
 8000936:	2017      	movs	r0, #23
 8000938:	f001 f8d1 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800093c:	2017      	movs	r0, #23
 800093e:	f001 f8ea 	bl	8001b16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2101      	movs	r1, #1
 8000946:	2028      	movs	r0, #40	; 0x28
 8000948:	f001 f8c9 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094c:	2028      	movs	r0, #40	; 0x28
 800094e:	f001 f8e2 	bl	8001b16 <HAL_NVIC_EnableIRQ>

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400
 8000964:	10110000 	.word	0x10110000
 8000968:	40020000 	.word	0x40020000

0800096c <Print>:

/* USER CODE BEGIN 4 */

void Print(char *line)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) line, strlen (line), HAL_MAX_DELAY);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fc33 	bl	80001e0 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <Print+0x28>)
 8000986:	f002 fabc 	bl	8002f02 <HAL_UART_Transmit>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000148 	.word	0x20000148

08000998 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80009fa:	2006      	movs	r0, #6
 80009fc:	f001 f864 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a33      	ldr	r2, [pc, #204]	; (8000af8 <HAL_ADC_MspInit+0xec>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d15f      	bne.n	8000aee <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b32      	ldr	r3, [pc, #200]	; (8000afc <HAL_ADC_MspInit+0xf0>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a31      	ldr	r2, [pc, #196]	; (8000afc <HAL_ADC_MspInit+0xf0>)
 8000a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <HAL_ADC_MspInit+0xf0>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <HAL_ADC_MspInit+0xf0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <HAL_ADC_MspInit+0xf0>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <HAL_ADC_MspInit+0xf0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = X_Axis_Pin|Y_Axis_Pin;
 8000a66:	2303      	movs	r3, #3
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4821      	ldr	r0, [pc, #132]	; (8000b00 <HAL_ADC_MspInit+0xf4>)
 8000a7a:	f001 fbd5 	bl	8002228 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000a80:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <HAL_ADC_MspInit+0xfc>)
 8000a82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000aa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000aa8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ac2:	4810      	ldr	r0, [pc, #64]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000ac4:	f001 f842 	bl	8001b4c <HAL_DMA_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000ace:	f7ff ff6d 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000ad6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_ADC_MspInit+0xf8>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2012      	movs	r0, #18
 8000ae4:	f000 fffb 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ae8:	2012      	movs	r0, #18
 8000aea:	f001 f814 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	; 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40012000 	.word	0x40012000
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	200000e8 	.word	0x200000e8
 8000b08:	40026410 	.word	0x40026410

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_UART_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b66:	230c      	movs	r3, #12
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b76:	2307      	movs	r3, #7
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_UART_MspInit+0x8c>)
 8000b82:	f001 fb51 	bl	8002228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f938 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	Print("Button B pressed!\n");
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <EXTI3_IRQHandler+0x14>)
 8000bfe:	f7ff feb5 	bl	800096c <Print>

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000c02:	2008      	movs	r0, #8
 8000c04:	f001 fcaa 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	08004094 	.word	0x08004094

08000c10 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	Print("Button D pressed!\n");
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <EXTI4_IRQHandler+0x14>)
 8000c16:	f7ff fea9 	bl	800096c <Print>

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000c1a:	2010      	movs	r0, #16
 8000c1c:	f001 fc9e 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	080040a8 	.word	0x080040a8

08000c28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <ADC_IRQHandler+0x10>)
 8000c2e:	f000 f99e 	bl	8000f6e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000098 	.word	0x20000098

08000c3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5))
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <EXTI9_5_IRQHandler+0x58>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	f003 0320 	and.w	r3, r3, #32
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <EXTI9_5_IRQHandler+0x18>
	{
		Print("Button C pressed!\n");
 8000c4c:	4812      	ldr	r0, [pc, #72]	; (8000c98 <EXTI9_5_IRQHandler+0x5c>)
 8000c4e:	f7ff fe8d 	bl	800096c <Print>
 8000c52:	e012      	b.n	8000c7a <EXTI9_5_IRQHandler+0x3e>
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <EXTI9_5_IRQHandler+0x58>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <EXTI9_5_IRQHandler+0x2c>
	{
		Print("Button F pressed!\n");
 8000c60:	480e      	ldr	r0, [pc, #56]	; (8000c9c <EXTI9_5_IRQHandler+0x60>)
 8000c62:	f7ff fe83 	bl	800096c <Print>
 8000c66:	e008      	b.n	8000c7a <EXTI9_5_IRQHandler+0x3e>
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_9))
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <EXTI9_5_IRQHandler+0x58>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <EXTI9_5_IRQHandler+0x3e>
	{
		Print("Joystick Button pressed!\n");
 8000c74:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <EXTI9_5_IRQHandler+0x64>)
 8000c76:	f7ff fe79 	bl	800096c <Print>
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c7a:	2020      	movs	r0, #32
 8000c7c:	f001 fc6e 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c80:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c84:	f001 fc6a 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000c88:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c8c:	f001 fc66 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013c00 	.word	0x40013c00
 8000c98:	080040bc 	.word	0x080040bc
 8000c9c:	080040d0 	.word	0x080040d0
 8000ca0:	080040e4 	.word	0x080040e4

08000ca4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	Print("Button A pressed!\n");
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <EXTI15_10_IRQHandler+0x18>)
 8000caa:	f7ff fe5f 	bl	800096c <Print>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000cae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cb2:	f001 fc53 	bl	800255c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	08004100 	.word	0x08004100

08000cc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <DMA2_Stream0_IRQHandler+0x10>)
 8000cc6:	f001 f847 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000e8 	.word	0x200000e8

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f002 fd5c 	bl	80037c0 <__errno>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20018000 	.word	0x20018000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	2000008c 	.word	0x2000008c
 8000d3c:	20000190 	.word	0x20000190

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SystemInit+0x28>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <SystemInit+0x28>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SystemInit+0x28>)
 8000d56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d72:	e003      	b.n	8000d7c <LoopCopyDataInit>

08000d74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d7a:	3104      	adds	r1, #4

08000d7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d84:	d3f6      	bcc.n	8000d74 <CopyDataInit>
  ldr  r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d88:	e002      	b.n	8000d90 <LoopFillZerobss>

08000d8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d8c:	f842 3b04 	str.w	r3, [r2], #4

08000d90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d94:	d3f9      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd3 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f002 fd17 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fbf7 	bl	8000590 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000da8:	08004178 	.word	0x08004178
  ldr  r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000db4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000db8:	20000190 	.word	0x20000190

08000dbc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <DMA1_Stream0_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 fe6d 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fde2 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fe85 	bl	8001b32 <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f000 fe4d 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000188 	.word	0x20000188

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000188 	.word	0x20000188

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_Delay+0x40>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e033      	b.n	8000f66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d109      	bne.n	8000f1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fd80 	bl	8000a0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d118      	bne.n	8000f58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f2e:	f023 0302 	bic.w	r3, r3, #2
 8000f32:	f043 0202 	orr.w	r2, r3, #2
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 fb6c 	bl	8001618 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f023 0303 	bic.w	r3, r3, #3
 8000f4e:	f043 0201 	orr.w	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
 8000f56:	e001      	b.n	8000f5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	bf0c      	ite	eq
 8000f8c:	2301      	moveq	r3, #1
 8000f8e:	2300      	movne	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0320 	and.w	r3, r3, #32
 8000f9e:	2b20      	cmp	r3, #32
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2301      	moveq	r3, #1
 8000fa4:	2300      	movne	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d049      	beq.n	8001044 <HAL_ADC_IRQHandler+0xd6>
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d046      	beq.n	8001044 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d105      	bne.n	8000fce <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d12b      	bne.n	8001034 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d127      	bne.n	8001034 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d119      	bne.n	8001034 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0220 	bic.w	r2, r2, #32
 800100e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d105      	bne.n	8001034 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fcaf 	bl	8000998 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f06f 0212 	mvn.w	r2, #18
 8001042:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf0c      	ite	eq
 8001052:	2301      	moveq	r3, #1
 8001054:	2300      	movne	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001064:	2b80      	cmp	r3, #128	; 0x80
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d057      	beq.n	8001126 <HAL_ADC_IRQHandler+0x1b8>
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d054      	beq.n	8001126 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	2b00      	cmp	r3, #0
 8001086:	d105      	bne.n	8001094 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d139      	bne.n	8001116 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d12b      	bne.n	8001116 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d124      	bne.n	8001116 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d11d      	bne.n	8001116 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d119      	bne.n	8001116 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010f0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	2b00      	cmp	r3, #0
 8001108:	d105      	bne.n	8001116 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f043 0201 	orr.w	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 fbfc 	bl	8001914 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f06f 020c 	mvn.w	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b01      	cmp	r3, #1
 8001132:	bf0c      	ite	eq
 8001134:	2301      	moveq	r3, #1
 8001136:	2300      	movne	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001146:	2b40      	cmp	r3, #64	; 0x40
 8001148:	bf0c      	ite	eq
 800114a:	2301      	moveq	r3, #1
 800114c:	2300      	movne	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d017      	beq.n	8001188 <HAL_ADC_IRQHandler+0x21a>
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d014      	beq.n	8001188 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d10d      	bne.n	8001188 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f917 	bl	80013ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f06f 0201 	mvn.w	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	2b20      	cmp	r3, #32
 8001194:	bf0c      	ite	eq
 8001196:	2301      	moveq	r3, #1
 8001198:	2300      	movne	r3, #0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d015      	beq.n	80011e8 <HAL_ADC_IRQHandler+0x27a>
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d012      	beq.n	80011e8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f043 0202 	orr.w	r2, r3, #2
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f06f 0220 	mvn.w	r2, #32
 80011d6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f8f1 	bl	80013c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f06f 0220 	mvn.w	r2, #32
 80011e6:	601a      	str	r2, [r3, #0]
  }
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_ADC_Start_DMA+0x1e>
 800120a:	2302      	movs	r3, #2
 800120c:	e0b1      	b.n	8001372 <HAL_ADC_Start_DMA+0x182>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b01      	cmp	r3, #1
 8001222:	d018      	beq.n	8001256 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001234:	4b51      	ldr	r3, [pc, #324]	; (800137c <HAL_ADC_Start_DMA+0x18c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a51      	ldr	r2, [pc, #324]	; (8001380 <HAL_ADC_Start_DMA+0x190>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0c9a      	lsrs	r2, r3, #18
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001248:	e002      	b.n	8001250 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	3b01      	subs	r3, #1
 800124e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f9      	bne.n	800124a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b01      	cmp	r3, #1
 8001262:	f040 8085 	bne.w	8001370 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001290:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012a4:	d106      	bne.n	80012b4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f023 0206 	bic.w	r2, r3, #6
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	645a      	str	r2, [r3, #68]	; 0x44
 80012b2:	e002      	b.n	80012ba <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012c2:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_ADC_Start_DMA+0x194>)
 80012c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <HAL_ADC_Start_DMA+0x198>)
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d2:	4a2e      	ldr	r2, [pc, #184]	; (800138c <HAL_ADC_Start_DMA+0x19c>)
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <HAL_ADC_Start_DMA+0x1a0>)
 80012dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80012f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001306:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	334c      	adds	r3, #76	; 0x4c
 8001312:	4619      	mov	r1, r3
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f000 fcc6 	bl	8001ca8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10f      	bne.n	8001348 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d11c      	bne.n	8001370 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	e013      	b.n	8001370 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a11      	ldr	r2, [pc, #68]	; (8001394 <HAL_ADC_Start_DMA+0x1a4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10e      	bne.n	8001370 <HAL_ADC_Start_DMA+0x180>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d107      	bne.n	8001370 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800136e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000000 	.word	0x20000000
 8001380:	431bde83 	.word	0x431bde83
 8001384:	40012300 	.word	0x40012300
 8001388:	08001811 	.word	0x08001811
 800138c:	080018cb 	.word	0x080018cb
 8001390:	080018e7 	.word	0x080018e7
 8001394:	40012000 	.word	0x40012000

08001398 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x1c>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e105      	b.n	80015fc <HAL_ADC_ConfigChannel+0x228>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b09      	cmp	r3, #9
 80013fe:	d925      	bls.n	800144c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68d9      	ldr	r1, [r3, #12]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	3b1e      	subs	r3, #30
 8001416:	2207      	movs	r2, #7
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43da      	mvns	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	400a      	ands	r2, r1
 8001424:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68d9      	ldr	r1, [r3, #12]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	4603      	mov	r3, r0
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4403      	add	r3, r0
 800143e:	3b1e      	subs	r3, #30
 8001440:	409a      	lsls	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	e022      	b.n	8001492 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6919      	ldr	r1, [r3, #16]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	2207      	movs	r2, #7
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	400a      	ands	r2, r1
 800146e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6919      	ldr	r1, [r3, #16]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	4603      	mov	r3, r0
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4403      	add	r3, r0
 8001488:	409a      	lsls	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b06      	cmp	r3, #6
 8001498:	d824      	bhi.n	80014e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	3b05      	subs	r3, #5
 80014ac:	221f      	movs	r2, #31
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	400a      	ands	r2, r1
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	3b05      	subs	r3, #5
 80014d6:	fa00 f203 	lsl.w	r2, r0, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	635a      	str	r2, [r3, #52]	; 0x34
 80014e2:	e04c      	b.n	800157e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	d824      	bhi.n	8001536 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	3b23      	subs	r3, #35	; 0x23
 80014fe:	221f      	movs	r2, #31
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43da      	mvns	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	400a      	ands	r2, r1
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	3b23      	subs	r3, #35	; 0x23
 8001528:	fa00 f203 	lsl.w	r2, r0, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
 8001534:	e023      	b.n	800157e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	3b41      	subs	r3, #65	; 0x41
 8001548:	221f      	movs	r2, #31
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	400a      	ands	r2, r1
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b41      	subs	r3, #65	; 0x41
 8001572:	fa00 f203 	lsl.w	r2, r0, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_ADC_ConfigChannel+0x234>)
 8001580:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a21      	ldr	r2, [pc, #132]	; (800160c <HAL_ADC_ConfigChannel+0x238>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d109      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x1cc>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b12      	cmp	r3, #18
 8001592:	d105      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_ADC_ConfigChannel+0x238>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d123      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x21e>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b10      	cmp	r3, #16
 80015b0:	d003      	beq.n	80015ba <HAL_ADC_ConfigChannel+0x1e6>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b11      	cmp	r3, #17
 80015b8:	d11b      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	d111      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_ADC_ConfigChannel+0x23c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_ADC_ConfigChannel+0x240>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	0c9a      	lsrs	r2, r3, #18
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e4:	e002      	b.n	80015ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f9      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40012300 	.word	0x40012300
 800160c:	40012000 	.word	0x40012000
 8001610:	20000000 	.word	0x20000000
 8001614:	431bde83 	.word	0x431bde83

08001618 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001620:	4b79      	ldr	r3, [pc, #484]	; (8001808 <ADC_Init+0x1f0>)
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	431a      	orrs	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800164c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	021a      	lsls	r2, r3, #8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6899      	ldr	r1, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	4a58      	ldr	r2, [pc, #352]	; (800180c <ADC_Init+0x1f4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d022      	beq.n	80016f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6899      	ldr	r1, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6899      	ldr	r1, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	e00f      	b.n	8001716 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001714:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0202 	bic.w	r2, r2, #2
 8001724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6899      	ldr	r1, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7e1b      	ldrb	r3, [r3, #24]
 8001730:	005a      	lsls	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d01b      	beq.n	800177c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001752:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001762:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6859      	ldr	r1, [r3, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	3b01      	subs	r3, #1
 8001770:	035a      	lsls	r2, r3, #13
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	e007      	b.n	800178c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800178a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	051a      	lsls	r2, r3, #20
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6899      	ldr	r1, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ce:	025a      	lsls	r2, r3, #9
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6899      	ldr	r1, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	029a      	lsls	r2, r3, #10
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	609a      	str	r2, [r3, #8]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40012300 	.word	0x40012300
 800180c:	0f000001 	.word	0x0f000001

08001810 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001826:	2b00      	cmp	r3, #0
 8001828:	d13c      	bne.n	80018a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d12b      	bne.n	800189c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001848:	2b00      	cmp	r3, #0
 800184a:	d127      	bne.n	800189c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001856:	2b00      	cmp	r3, #0
 8001858:	d006      	beq.n	8001868 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001864:	2b00      	cmp	r3, #0
 8001866:	d119      	bne.n	800189c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0220 	bic.w	r2, r2, #32
 8001876:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff f87b 	bl	8000998 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018a2:	e00e      	b.n	80018c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff fd85 	bl	80013c0 <HAL_ADC_ErrorCallback>
}
 80018b6:	e004      	b.n	80018c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f7ff fd5d 	bl	8001398 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f043 0204 	orr.w	r2, r3, #4
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f7ff fd5a 	bl	80013c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	; (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff29 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff3e 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff8e 	bl	8001a1c <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff31 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa2 	bl	8001a84 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff f998 	bl	8000e8c <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e099      	b.n	8001c9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b88:	e00f      	b.n	8001baa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8a:	f7ff f97f 	bl	8000e8c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d908      	bls.n	8001baa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e078      	b.n	8001c9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e8      	bne.n	8001b8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <HAL_DMA_Init+0x158>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d107      	bne.n	8001c14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f023 0307 	bic.w	r3, r3, #7
 8001c2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d117      	bne.n	8001c6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00e      	beq.n	8001c6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fa6f 	bl	8002134 <DMA_CheckFifoParam>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2240      	movs	r2, #64	; 0x40
 8001c60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e016      	b.n	8001c9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fa26 	bl	80020c8 <DMA_CalcBaseAndBitshift>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	223f      	movs	r2, #63	; 0x3f
 8001c86:	409a      	lsls	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	f010803f 	.word	0xf010803f

08001ca8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_DMA_Start_IT+0x26>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e040      	b.n	8001d50 <HAL_DMA_Start_IT+0xa8>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d12f      	bne.n	8001d42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 f9b8 	bl	800206c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	223f      	movs	r2, #63	; 0x3f
 8001d02:	409a      	lsls	r2, r3
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0216 	orr.w	r2, r2, #22
 8001d16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0208 	orr.w	r2, r2, #8
 8001d2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e005      	b.n	8001d4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d64:	4b92      	ldr	r3, [pc, #584]	; (8001fb0 <HAL_DMA_IRQHandler+0x258>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a92      	ldr	r2, [pc, #584]	; (8001fb4 <HAL_DMA_IRQHandler+0x25c>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	2208      	movs	r2, #8
 8001d84:	409a      	lsls	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01a      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0204 	bic.w	r2, r2, #4
 8001daa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	2208      	movs	r2, #8
 8001db2:	409a      	lsls	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	2201      	movs	r2, #1
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d012      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	2201      	movs	r2, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	f043 0202 	orr.w	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	2204      	movs	r2, #4
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	f043 0204 	orr.w	r2, r3, #4
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	2210      	movs	r2, #16
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d043      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d03c      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	2210      	movs	r2, #16
 8001e54:	409a      	lsls	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d018      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d108      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d024      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
 8001e86:	e01f      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
 8001e98:	e016      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0208 	bic.w	r2, r2, #8
 8001eb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	2220      	movs	r2, #32
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 808e 	beq.w	8001ff6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8086 	beq.w	8001ff6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2220      	movs	r2, #32
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d136      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0216 	bic.w	r2, r2, #22
 8001f10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <HAL_DMA_IRQHandler+0x1da>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0208 	bic.w	r2, r2, #8
 8001f40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	223f      	movs	r2, #63	; 0x3f
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d07d      	beq.n	8002062 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
        }
        return;
 8001f6e:	e078      	b.n	8002062 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01c      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d108      	bne.n	8001f9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d030      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
 8001f9c:	e02b      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d027      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
 8001fae:	e022      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0210 	bic.w	r2, r2, #16
 8001fd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d032      	beq.n	8002064 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d022      	beq.n	8002050 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2205      	movs	r2, #5
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	429a      	cmp	r2, r3
 800202c:	d307      	bcc.n	800203e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f2      	bne.n	8002022 <HAL_DMA_IRQHandler+0x2ca>
 800203c:	e000      	b.n	8002040 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800203e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
 8002060:	e000      	b.n	8002064 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002062:	bf00      	nop
    }
  }
}
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop

0800206c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002088:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d108      	bne.n	80020ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020aa:	e007      	b.n	80020bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	60da      	str	r2, [r3, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3b10      	subs	r3, #16
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <DMA_CalcBaseAndBitshift+0x64>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020e2:	4a13      	ldr	r2, [pc, #76]	; (8002130 <DMA_CalcBaseAndBitshift+0x68>)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d909      	bls.n	800210a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	1d1a      	adds	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	659a      	str	r2, [r3, #88]	; 0x58
 8002108:	e007      	b.n	800211a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	aaaaaaab 	.word	0xaaaaaaab
 8002130:	0800412c 	.word	0x0800412c

08002134 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11f      	bne.n	800218e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d855      	bhi.n	8002200 <DMA_CheckFifoParam+0xcc>
 8002154:	a201      	add	r2, pc, #4	; (adr r2, 800215c <DMA_CheckFifoParam+0x28>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	0800216d 	.word	0x0800216d
 8002160:	0800217f 	.word	0x0800217f
 8002164:	0800216d 	.word	0x0800216d
 8002168:	08002201 	.word	0x08002201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d045      	beq.n	8002204 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800217c:	e042      	b.n	8002204 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002186:	d13f      	bne.n	8002208 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218c:	e03c      	b.n	8002208 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002196:	d121      	bne.n	80021dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d836      	bhi.n	800220c <DMA_CheckFifoParam+0xd8>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <DMA_CheckFifoParam+0x70>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021bb 	.word	0x080021bb
 80021ac:	080021b5 	.word	0x080021b5
 80021b0:	080021cd 	.word	0x080021cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      break;
 80021b8:	e02f      	b.n	800221a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d024      	beq.n	8002210 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ca:	e021      	b.n	8002210 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021d4:	d11e      	bne.n	8002214 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021da:	e01b      	b.n	8002214 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d902      	bls.n	80021e8 <DMA_CheckFifoParam+0xb4>
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d003      	beq.n	80021ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021e6:	e018      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      break;
 80021ec:	e015      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00e      	beq.n	8002218 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      break;
 80021fe:	e00b      	b.n	8002218 <DMA_CheckFifoParam+0xe4>
      break;
 8002200:	bf00      	nop
 8002202:	e00a      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002204:	bf00      	nop
 8002206:	e008      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002208:	bf00      	nop
 800220a:	e006      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 800220c:	bf00      	nop
 800220e:	e004      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002210:	bf00      	nop
 8002212:	e002      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;   
 8002214:	bf00      	nop
 8002216:	e000      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002218:	bf00      	nop
    }
  } 
  
  return status; 
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e159      	b.n	80024f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002244:	2201      	movs	r2, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	429a      	cmp	r2, r3
 800225e:	f040 8148 	bne.w	80024f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d00b      	beq.n	8002282 <HAL_GPIO_Init+0x5a>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002276:	2b11      	cmp	r3, #17
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b12      	cmp	r3, #18
 8002280:	d130      	bne.n	80022e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 0201 	and.w	r2, r3, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0xfc>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b12      	cmp	r3, #18
 8002322:	d123      	bne.n	800236c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	08da      	lsrs	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3208      	adds	r2, #8
 800232c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	220f      	movs	r2, #15
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	08da      	lsrs	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3208      	adds	r2, #8
 8002366:	69b9      	ldr	r1, [r7, #24]
 8002368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0203 	and.w	r2, r3, #3
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a2 	beq.w	80024f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b56      	ldr	r3, [pc, #344]	; (800250c <HAL_GPIO_Init+0x2e4>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a55      	ldr	r2, [pc, #340]	; (800250c <HAL_GPIO_Init+0x2e4>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b53      	ldr	r3, [pc, #332]	; (800250c <HAL_GPIO_Init+0x2e4>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ca:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_GPIO_Init+0x2e8>)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a48      	ldr	r2, [pc, #288]	; (8002514 <HAL_GPIO_Init+0x2ec>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d019      	beq.n	800242a <HAL_GPIO_Init+0x202>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a47      	ldr	r2, [pc, #284]	; (8002518 <HAL_GPIO_Init+0x2f0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0x1fe>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a46      	ldr	r2, [pc, #280]	; (800251c <HAL_GPIO_Init+0x2f4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_GPIO_Init+0x1fa>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a45      	ldr	r2, [pc, #276]	; (8002520 <HAL_GPIO_Init+0x2f8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x1f6>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a44      	ldr	r2, [pc, #272]	; (8002524 <HAL_GPIO_Init+0x2fc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_GPIO_Init+0x1f2>
 8002416:	2304      	movs	r3, #4
 8002418:	e008      	b.n	800242c <HAL_GPIO_Init+0x204>
 800241a:	2307      	movs	r3, #7
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x204>
 800241e:	2303      	movs	r3, #3
 8002420:	e004      	b.n	800242c <HAL_GPIO_Init+0x204>
 8002422:	2302      	movs	r3, #2
 8002424:	e002      	b.n	800242c <HAL_GPIO_Init+0x204>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_GPIO_Init+0x204>
 800242a:	2300      	movs	r3, #0
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	f002 0203 	and.w	r2, r2, #3
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	4093      	lsls	r3, r2
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800243c:	4934      	ldr	r1, [pc, #208]	; (8002510 <HAL_GPIO_Init+0x2e8>)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800244a:	4b37      	ldr	r3, [pc, #220]	; (8002528 <HAL_GPIO_Init+0x300>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800246e:	4a2e      	ldr	r2, [pc, #184]	; (8002528 <HAL_GPIO_Init+0x300>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_GPIO_Init+0x300>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002498:	4a23      	ldr	r2, [pc, #140]	; (8002528 <HAL_GPIO_Init+0x300>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_GPIO_Init+0x300>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c2:	4a19      	ldr	r2, [pc, #100]	; (8002528 <HAL_GPIO_Init+0x300>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c8:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_GPIO_Init+0x300>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_GPIO_Init+0x300>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b0f      	cmp	r3, #15
 80024fc:	f67f aea2 	bls.w	8002244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002500:	bf00      	nop
 8002502:	3724      	adds	r7, #36	; 0x24
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40023800 	.word	0x40023800
 8002510:	40013800 	.word	0x40013800
 8002514:	40020000 	.word	0x40020000
 8002518:	40020400 	.word	0x40020400
 800251c:	40020800 	.word	0x40020800
 8002520:	40020c00 	.word	0x40020c00
 8002524:	40021000 	.word	0x40021000
 8002528:	40013c00 	.word	0x40013c00

0800252c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e001      	b.n	800254e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f806 	bl	800258c <HAL_GPIO_EXTI_Callback>
  }
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40013c00 	.word	0x40013c00

0800258c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e25b      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d075      	beq.n	80026ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	4ba3      	ldr	r3, [pc, #652]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d00c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4ba0      	ldr	r3, [pc, #640]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d112      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4b9d      	ldr	r3, [pc, #628]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e6:	d10b      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b99      	ldr	r3, [pc, #612]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d05b      	beq.n	80026ac <HAL_RCC_OscConfig+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d157      	bne.n	80026ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e236      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002608:	d106      	bne.n	8002618 <HAL_RCC_OscConfig+0x74>
 800260a:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a90      	ldr	r2, [pc, #576]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x98>
 8002622:	4b8b      	ldr	r3, [pc, #556]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a8a      	ldr	r2, [pc, #552]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a87      	ldr	r2, [pc, #540]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 800263c:	4b84      	ldr	r3, [pc, #528]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a83      	ldr	r2, [pc, #524]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b81      	ldr	r3, [pc, #516]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a80      	ldr	r2, [pc, #512]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe fc16 	bl	8000e8c <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe fc12 	bl	8000e8c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e1fb      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xc0>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fc02 	bl	8000e8c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fbfe 	bl	8000e8c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1e7      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0xe8>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d063      	beq.n	8002782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	4b65      	ldr	r3, [pc, #404]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c6:	4b62      	ldr	r3, [pc, #392]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1bb      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b56      	ldr	r3, [pc, #344]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4952      	ldr	r1, [pc, #328]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	e03a      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002714:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <HAL_RCC_OscConfig+0x2b0>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe fbb7 	bl	8000e8c <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002722:	f7fe fbb3 	bl	8000e8c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e19c      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4940      	ldr	r1, [pc, #256]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <HAL_RCC_OscConfig+0x2b0>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fb96 	bl	8000e8c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002764:	f7fe fb92 	bl	8000e8c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e17b      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	4b36      	ldr	r3, [pc, #216]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d030      	beq.n	80027f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002796:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_RCC_OscConfig+0x2b4>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fb76 	bl	8000e8c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fe fb72 	bl	8000e8c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e15b      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x200>
 80027c2:	e015      	b.n	80027f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_RCC_OscConfig+0x2b4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7fe fb5f 	bl	8000e8c <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d2:	f7fe fb5b 	bl	8000e8c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e144      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80027e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80a0 	beq.w	800293e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10f      	bne.n	800282e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x2b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d121      	bne.n	800287e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_RCC_OscConfig+0x2b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <HAL_RCC_OscConfig+0x2b8>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002846:	f7fe fb21 	bl	8000e8c <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	e011      	b.n	8002872 <HAL_RCC_OscConfig+0x2ce>
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	42470000 	.word	0x42470000
 8002858:	42470e80 	.word	0x42470e80
 800285c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7fe fb14 	bl	8000e8c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0fd      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b81      	ldr	r3, [pc, #516]	; (8002a78 <HAL_RCC_OscConfig+0x4d4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d106      	bne.n	8002894 <HAL_RCC_OscConfig+0x2f0>
 8002886:	4b7d      	ldr	r3, [pc, #500]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a7c      	ldr	r2, [pc, #496]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
 8002892:	e01c      	b.n	80028ce <HAL_RCC_OscConfig+0x32a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x312>
 800289c:	4b77      	ldr	r3, [pc, #476]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a76      	ldr	r2, [pc, #472]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 80028a2:	f043 0304 	orr.w	r3, r3, #4
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
 80028a8:	4b74      	ldr	r3, [pc, #464]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a73      	ldr	r2, [pc, #460]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	e00b      	b.n	80028ce <HAL_RCC_OscConfig+0x32a>
 80028b6:	4b71      	ldr	r3, [pc, #452]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a70      	ldr	r2, [pc, #448]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70
 80028c2:	4b6e      	ldr	r3, [pc, #440]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a6d      	ldr	r2, [pc, #436]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d015      	beq.n	8002902 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d6:	f7fe fad9 	bl	8000e8c <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	e00a      	b.n	80028f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe fad5 	bl	8000e8c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0bc      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f4:	4b61      	ldr	r3, [pc, #388]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ee      	beq.n	80028de <HAL_RCC_OscConfig+0x33a>
 8002900:	e014      	b.n	800292c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe fac3 	bl	8000e8c <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe fabf 	bl	8000e8c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e0a6      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002920:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ee      	bne.n	800290a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d105      	bne.n	800293e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002932:	4b52      	ldr	r3, [pc, #328]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a51      	ldr	r2, [pc, #324]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 8002938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8092 	beq.w	8002a6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002948:	4b4c      	ldr	r3, [pc, #304]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	d05c      	beq.n	8002a0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d141      	bne.n	80029e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295c:	4b48      	ldr	r3, [pc, #288]	; (8002a80 <HAL_RCC_OscConfig+0x4dc>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe fa93 	bl	8000e8c <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296a:	f7fe fa8f 	bl	8000e8c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e078      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297c:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	019b      	lsls	r3, r3, #6
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	3b01      	subs	r3, #1
 80029a2:	041b      	lsls	r3, r3, #16
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	061b      	lsls	r3, r3, #24
 80029ac:	4933      	ldr	r1, [pc, #204]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b2:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <HAL_RCC_OscConfig+0x4dc>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe fa68 	bl	8000e8c <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe fa64 	bl	8000e8c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e04d      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x41c>
 80029de:	e045      	b.n	8002a6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x4dc>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe fa51 	bl	8000e8c <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe fa4d 	bl	8000e8c <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e036      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a00:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f0      	bne.n	80029ee <HAL_RCC_OscConfig+0x44a>
 8002a0c:	e02e      	b.n	8002a6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e029      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_RCC_OscConfig+0x4d8>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d11c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d115      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a42:	4013      	ands	r3, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d10d      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d106      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	42470060 	.word	0x42470060

08002a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0cc      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b68      	ldr	r3, [pc, #416]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d90c      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b65      	ldr	r3, [pc, #404]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0b8      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad8:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a58      	ldr	r2, [pc, #352]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af0:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a52      	ldr	r2, [pc, #328]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afc:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	494d      	ldr	r1, [pc, #308]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d044      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d119      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e07f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e06f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e067      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4934      	ldr	r1, [pc, #208]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b74:	f7fe f98a 	bl	8000e8c <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7fe f986 	bl	8000e8c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e04f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 020c 	and.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1eb      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d20c      	bcs.n	8002bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e032      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4916      	ldr	r1, [pc, #88]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	490e      	ldr	r1, [pc, #56]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c0a:	f000 f821 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002c0e:	4601      	mov	r1, r0
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c22:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_ClockConfig+0x1c8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe f8ea 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023c00 	.word	0x40023c00
 8002c40:	40023800 	.word	0x40023800
 8002c44:	08004114 	.word	0x08004114
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000004 	.word	0x20000004

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d007      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x32>
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d008      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x38>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 80b4 	bne.w	8002de4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b5e      	ldr	r3, [pc, #376]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c7e:	60bb      	str	r3, [r7, #8]
       break;
 8002c80:	e0b3      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c82:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c84:	60bb      	str	r3, [r7, #8]
      break;
 8002c86:	e0b0      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c88:	4b5a      	ldr	r3, [pc, #360]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c92:	4b58      	ldr	r3, [pc, #352]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d04a      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9e:	4b55      	ldr	r3, [pc, #340]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	f04f 0400 	mov.w	r4, #0
 8002ca8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	ea03 0501 	and.w	r5, r3, r1
 8002cb4:	ea04 0602 	and.w	r6, r4, r2
 8002cb8:	4629      	mov	r1, r5
 8002cba:	4632      	mov	r2, r6
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	f04f 0400 	mov.w	r4, #0
 8002cc4:	0154      	lsls	r4, r2, #5
 8002cc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cca:	014b      	lsls	r3, r1, #5
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4622      	mov	r2, r4
 8002cd0:	1b49      	subs	r1, r1, r5
 8002cd2:	eb62 0206 	sbc.w	r2, r2, r6
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	f04f 0400 	mov.w	r4, #0
 8002cde:	0194      	lsls	r4, r2, #6
 8002ce0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ce4:	018b      	lsls	r3, r1, #6
 8002ce6:	1a5b      	subs	r3, r3, r1
 8002ce8:	eb64 0402 	sbc.w	r4, r4, r2
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	00e2      	lsls	r2, r4, #3
 8002cf6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cfa:	00d9      	lsls	r1, r3, #3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4614      	mov	r4, r2
 8002d00:	195b      	adds	r3, r3, r5
 8002d02:	eb44 0406 	adc.w	r4, r4, r6
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	0262      	lsls	r2, r4, #9
 8002d10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d14:	0259      	lsls	r1, r3, #9
 8002d16:	460b      	mov	r3, r1
 8002d18:	4614      	mov	r4, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f04f 0400 	mov.w	r4, #0
 8002d24:	461a      	mov	r2, r3
 8002d26:	4623      	mov	r3, r4
 8002d28:	f7fd fab2 	bl	8000290 <__aeabi_uldivmod>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	e049      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d34:	4b2f      	ldr	r3, [pc, #188]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	f04f 0400 	mov.w	r4, #0
 8002d3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	ea03 0501 	and.w	r5, r3, r1
 8002d4a:	ea04 0602 	and.w	r6, r4, r2
 8002d4e:	4629      	mov	r1, r5
 8002d50:	4632      	mov	r2, r6
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	f04f 0400 	mov.w	r4, #0
 8002d5a:	0154      	lsls	r4, r2, #5
 8002d5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d60:	014b      	lsls	r3, r1, #5
 8002d62:	4619      	mov	r1, r3
 8002d64:	4622      	mov	r2, r4
 8002d66:	1b49      	subs	r1, r1, r5
 8002d68:	eb62 0206 	sbc.w	r2, r2, r6
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	f04f 0400 	mov.w	r4, #0
 8002d74:	0194      	lsls	r4, r2, #6
 8002d76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d7a:	018b      	lsls	r3, r1, #6
 8002d7c:	1a5b      	subs	r3, r3, r1
 8002d7e:	eb64 0402 	sbc.w	r4, r4, r2
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	00e2      	lsls	r2, r4, #3
 8002d8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d90:	00d9      	lsls	r1, r3, #3
 8002d92:	460b      	mov	r3, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	195b      	adds	r3, r3, r5
 8002d98:	eb44 0406 	adc.w	r4, r4, r6
 8002d9c:	f04f 0100 	mov.w	r1, #0
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	02a2      	lsls	r2, r4, #10
 8002da6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002daa:	0299      	lsls	r1, r3, #10
 8002dac:	460b      	mov	r3, r1
 8002dae:	4614      	mov	r4, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	4621      	mov	r1, r4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f04f 0400 	mov.w	r4, #0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4623      	mov	r3, r4
 8002dbe:	f7fd fa67 	bl	8000290 <__aeabi_uldivmod>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	60bb      	str	r3, [r7, #8]
      break;
 8002de2:	e002      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002de6:	60bb      	str	r3, [r7, #8]
      break;
 8002de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dea:	68bb      	ldr	r3, [r7, #8]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df4:	40023800 	.word	0x40023800
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	007a1200 	.word	0x007a1200

08002e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000000 	.word	0x20000000

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e1c:	f7ff fff0 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e20:	4601      	mov	r1, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0a9b      	lsrs	r3, r3, #10
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4a03      	ldr	r2, [pc, #12]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2e:	5cd3      	ldrb	r3, [r2, r3]
 8002e30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	08004124 	.word	0x08004124

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e44:	f7ff ffdc 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e48:	4601      	mov	r1, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0b5b      	lsrs	r3, r3, #13
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4a03      	ldr	r2, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40023800 	.word	0x40023800
 8002e64:	08004124 	.word	0x08004124

08002e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e03f      	b.n	8002efa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd fe3c 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	; 0x24
 8002e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f90b 	bl	80030c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b088      	sub	sp, #32
 8002f06:	af02      	add	r7, sp, #8
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	f040 8083 	bne.w	800302a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_UART_Transmit+0x2e>
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e07b      	b.n	800302c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Transmit+0x40>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e074      	b.n	800302c <HAL_UART_Transmit+0x12a>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2221      	movs	r2, #33	; 0x21
 8002f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f58:	f7fd ff98 	bl	8000e8c <HAL_GetTick>
 8002f5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	88fa      	ldrh	r2, [r7, #6]
 8002f62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	88fa      	ldrh	r2, [r7, #6]
 8002f68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002f72:	e042      	b.n	8002ffa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8a:	d122      	bne.n	8002fd2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2200      	movs	r2, #0
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f84c 	bl	8003034 <UART_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e042      	b.n	800302c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	e017      	b.n	8002ffa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	e013      	b.n	8002ffa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2180      	movs	r1, #128	; 0x80
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f829 	bl	8003034 <UART_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e01f      	b.n	800302c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	60ba      	str	r2, [r7, #8]
 8002ff2:	781a      	ldrb	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1b7      	bne.n	8002f74 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	2140      	movs	r1, #64	; 0x40
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f810 	bl	8003034 <UART_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e006      	b.n	800302c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e000      	b.n	800302c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003044:	e02c      	b.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800304c:	d028      	beq.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <UART_WaitOnFlagUntilTimeout+0x30>
 8003054:	f7fd ff1a 	bl	8000e8c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	429a      	cmp	r2, r3
 8003062:	d21d      	bcs.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003072:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e00f      	b.n	80030c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4013      	ands	r3, r2
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d0c3      	beq.n	8003046 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800310a:	f023 030c 	bic.w	r3, r3, #12
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	68f9      	ldr	r1, [r7, #12]
 8003114:	430b      	orrs	r3, r1
 8003116:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003136:	f040 818b 	bne.w	8003450 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4ac1      	ldr	r2, [pc, #772]	; (8003444 <UART_SetConfig+0x37c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d005      	beq.n	8003150 <UART_SetConfig+0x88>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4abf      	ldr	r2, [pc, #764]	; (8003448 <UART_SetConfig+0x380>)
 800314a:	4293      	cmp	r3, r2
 800314c:	f040 80bd 	bne.w	80032ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003150:	f7ff fe76 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 8003154:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	461d      	mov	r5, r3
 800315a:	f04f 0600 	mov.w	r6, #0
 800315e:	46a8      	mov	r8, r5
 8003160:	46b1      	mov	r9, r6
 8003162:	eb18 0308 	adds.w	r3, r8, r8
 8003166:	eb49 0409 	adc.w	r4, r9, r9
 800316a:	4698      	mov	r8, r3
 800316c:	46a1      	mov	r9, r4
 800316e:	eb18 0805 	adds.w	r8, r8, r5
 8003172:	eb49 0906 	adc.w	r9, r9, r6
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003182:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003186:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800318a:	4688      	mov	r8, r1
 800318c:	4691      	mov	r9, r2
 800318e:	eb18 0005 	adds.w	r0, r8, r5
 8003192:	eb49 0106 	adc.w	r1, r9, r6
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	461d      	mov	r5, r3
 800319c:	f04f 0600 	mov.w	r6, #0
 80031a0:	196b      	adds	r3, r5, r5
 80031a2:	eb46 0406 	adc.w	r4, r6, r6
 80031a6:	461a      	mov	r2, r3
 80031a8:	4623      	mov	r3, r4
 80031aa:	f7fd f871 	bl	8000290 <__aeabi_uldivmod>
 80031ae:	4603      	mov	r3, r0
 80031b0:	460c      	mov	r4, r1
 80031b2:	461a      	mov	r2, r3
 80031b4:	4ba5      	ldr	r3, [pc, #660]	; (800344c <UART_SetConfig+0x384>)
 80031b6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	461d      	mov	r5, r3
 80031c4:	f04f 0600 	mov.w	r6, #0
 80031c8:	46a9      	mov	r9, r5
 80031ca:	46b2      	mov	sl, r6
 80031cc:	eb19 0309 	adds.w	r3, r9, r9
 80031d0:	eb4a 040a 	adc.w	r4, sl, sl
 80031d4:	4699      	mov	r9, r3
 80031d6:	46a2      	mov	sl, r4
 80031d8:	eb19 0905 	adds.w	r9, r9, r5
 80031dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80031e0:	f04f 0100 	mov.w	r1, #0
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031f4:	4689      	mov	r9, r1
 80031f6:	4692      	mov	sl, r2
 80031f8:	eb19 0005 	adds.w	r0, r9, r5
 80031fc:	eb4a 0106 	adc.w	r1, sl, r6
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	461d      	mov	r5, r3
 8003206:	f04f 0600 	mov.w	r6, #0
 800320a:	196b      	adds	r3, r5, r5
 800320c:	eb46 0406 	adc.w	r4, r6, r6
 8003210:	461a      	mov	r2, r3
 8003212:	4623      	mov	r3, r4
 8003214:	f7fd f83c 	bl	8000290 <__aeabi_uldivmod>
 8003218:	4603      	mov	r3, r0
 800321a:	460c      	mov	r4, r1
 800321c:	461a      	mov	r2, r3
 800321e:	4b8b      	ldr	r3, [pc, #556]	; (800344c <UART_SetConfig+0x384>)
 8003220:	fba3 1302 	umull	r1, r3, r3, r2
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	2164      	movs	r1, #100	; 0x64
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	3332      	adds	r3, #50	; 0x32
 8003232:	4a86      	ldr	r2, [pc, #536]	; (800344c <UART_SetConfig+0x384>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003240:	4498      	add	r8, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	461d      	mov	r5, r3
 8003246:	f04f 0600 	mov.w	r6, #0
 800324a:	46a9      	mov	r9, r5
 800324c:	46b2      	mov	sl, r6
 800324e:	eb19 0309 	adds.w	r3, r9, r9
 8003252:	eb4a 040a 	adc.w	r4, sl, sl
 8003256:	4699      	mov	r9, r3
 8003258:	46a2      	mov	sl, r4
 800325a:	eb19 0905 	adds.w	r9, r9, r5
 800325e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800326e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003276:	4689      	mov	r9, r1
 8003278:	4692      	mov	sl, r2
 800327a:	eb19 0005 	adds.w	r0, r9, r5
 800327e:	eb4a 0106 	adc.w	r1, sl, r6
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	461d      	mov	r5, r3
 8003288:	f04f 0600 	mov.w	r6, #0
 800328c:	196b      	adds	r3, r5, r5
 800328e:	eb46 0406 	adc.w	r4, r6, r6
 8003292:	461a      	mov	r2, r3
 8003294:	4623      	mov	r3, r4
 8003296:	f7fc fffb 	bl	8000290 <__aeabi_uldivmod>
 800329a:	4603      	mov	r3, r0
 800329c:	460c      	mov	r4, r1
 800329e:	461a      	mov	r2, r3
 80032a0:	4b6a      	ldr	r3, [pc, #424]	; (800344c <UART_SetConfig+0x384>)
 80032a2:	fba3 1302 	umull	r1, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2164      	movs	r1, #100	; 0x64
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	3332      	adds	r3, #50	; 0x32
 80032b4:	4a65      	ldr	r2, [pc, #404]	; (800344c <UART_SetConfig+0x384>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	f003 0207 	and.w	r2, r3, #7
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4442      	add	r2, r8
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	e26f      	b.n	80037aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ca:	f7ff fda5 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 80032ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	461d      	mov	r5, r3
 80032d4:	f04f 0600 	mov.w	r6, #0
 80032d8:	46a8      	mov	r8, r5
 80032da:	46b1      	mov	r9, r6
 80032dc:	eb18 0308 	adds.w	r3, r8, r8
 80032e0:	eb49 0409 	adc.w	r4, r9, r9
 80032e4:	4698      	mov	r8, r3
 80032e6:	46a1      	mov	r9, r4
 80032e8:	eb18 0805 	adds.w	r8, r8, r5
 80032ec:	eb49 0906 	adc.w	r9, r9, r6
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003300:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003304:	4688      	mov	r8, r1
 8003306:	4691      	mov	r9, r2
 8003308:	eb18 0005 	adds.w	r0, r8, r5
 800330c:	eb49 0106 	adc.w	r1, r9, r6
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	461d      	mov	r5, r3
 8003316:	f04f 0600 	mov.w	r6, #0
 800331a:	196b      	adds	r3, r5, r5
 800331c:	eb46 0406 	adc.w	r4, r6, r6
 8003320:	461a      	mov	r2, r3
 8003322:	4623      	mov	r3, r4
 8003324:	f7fc ffb4 	bl	8000290 <__aeabi_uldivmod>
 8003328:	4603      	mov	r3, r0
 800332a:	460c      	mov	r4, r1
 800332c:	461a      	mov	r2, r3
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <UART_SetConfig+0x384>)
 8003330:	fba3 2302 	umull	r2, r3, r3, r2
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	461d      	mov	r5, r3
 800333e:	f04f 0600 	mov.w	r6, #0
 8003342:	46a9      	mov	r9, r5
 8003344:	46b2      	mov	sl, r6
 8003346:	eb19 0309 	adds.w	r3, r9, r9
 800334a:	eb4a 040a 	adc.w	r4, sl, sl
 800334e:	4699      	mov	r9, r3
 8003350:	46a2      	mov	sl, r4
 8003352:	eb19 0905 	adds.w	r9, r9, r5
 8003356:	eb4a 0a06 	adc.w	sl, sl, r6
 800335a:	f04f 0100 	mov.w	r1, #0
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003366:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800336a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800336e:	4689      	mov	r9, r1
 8003370:	4692      	mov	sl, r2
 8003372:	eb19 0005 	adds.w	r0, r9, r5
 8003376:	eb4a 0106 	adc.w	r1, sl, r6
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	461d      	mov	r5, r3
 8003380:	f04f 0600 	mov.w	r6, #0
 8003384:	196b      	adds	r3, r5, r5
 8003386:	eb46 0406 	adc.w	r4, r6, r6
 800338a:	461a      	mov	r2, r3
 800338c:	4623      	mov	r3, r4
 800338e:	f7fc ff7f 	bl	8000290 <__aeabi_uldivmod>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	461a      	mov	r2, r3
 8003398:	4b2c      	ldr	r3, [pc, #176]	; (800344c <UART_SetConfig+0x384>)
 800339a:	fba3 1302 	umull	r1, r3, r3, r2
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2164      	movs	r1, #100	; 0x64
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	3332      	adds	r3, #50	; 0x32
 80033ac:	4a27      	ldr	r2, [pc, #156]	; (800344c <UART_SetConfig+0x384>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033ba:	4498      	add	r8, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	461d      	mov	r5, r3
 80033c0:	f04f 0600 	mov.w	r6, #0
 80033c4:	46a9      	mov	r9, r5
 80033c6:	46b2      	mov	sl, r6
 80033c8:	eb19 0309 	adds.w	r3, r9, r9
 80033cc:	eb4a 040a 	adc.w	r4, sl, sl
 80033d0:	4699      	mov	r9, r3
 80033d2:	46a2      	mov	sl, r4
 80033d4:	eb19 0905 	adds.w	r9, r9, r5
 80033d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80033dc:	f04f 0100 	mov.w	r1, #0
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033f0:	4689      	mov	r9, r1
 80033f2:	4692      	mov	sl, r2
 80033f4:	eb19 0005 	adds.w	r0, r9, r5
 80033f8:	eb4a 0106 	adc.w	r1, sl, r6
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	461d      	mov	r5, r3
 8003402:	f04f 0600 	mov.w	r6, #0
 8003406:	196b      	adds	r3, r5, r5
 8003408:	eb46 0406 	adc.w	r4, r6, r6
 800340c:	461a      	mov	r2, r3
 800340e:	4623      	mov	r3, r4
 8003410:	f7fc ff3e 	bl	8000290 <__aeabi_uldivmod>
 8003414:	4603      	mov	r3, r0
 8003416:	460c      	mov	r4, r1
 8003418:	461a      	mov	r2, r3
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <UART_SetConfig+0x384>)
 800341c:	fba3 1302 	umull	r1, r3, r3, r2
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	2164      	movs	r1, #100	; 0x64
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	3332      	adds	r3, #50	; 0x32
 800342e:	4a07      	ldr	r2, [pc, #28]	; (800344c <UART_SetConfig+0x384>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	f003 0207 	and.w	r2, r3, #7
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4442      	add	r2, r8
 8003440:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003442:	e1b2      	b.n	80037aa <UART_SetConfig+0x6e2>
 8003444:	40011000 	.word	0x40011000
 8003448:	40011400 	.word	0x40011400
 800344c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4ad7      	ldr	r2, [pc, #860]	; (80037b4 <UART_SetConfig+0x6ec>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d005      	beq.n	8003466 <UART_SetConfig+0x39e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4ad6      	ldr	r2, [pc, #856]	; (80037b8 <UART_SetConfig+0x6f0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	f040 80d1 	bne.w	8003608 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003466:	f7ff fceb 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 800346a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	469a      	mov	sl, r3
 8003470:	f04f 0b00 	mov.w	fp, #0
 8003474:	46d0      	mov	r8, sl
 8003476:	46d9      	mov	r9, fp
 8003478:	eb18 0308 	adds.w	r3, r8, r8
 800347c:	eb49 0409 	adc.w	r4, r9, r9
 8003480:	4698      	mov	r8, r3
 8003482:	46a1      	mov	r9, r4
 8003484:	eb18 080a 	adds.w	r8, r8, sl
 8003488:	eb49 090b 	adc.w	r9, r9, fp
 800348c:	f04f 0100 	mov.w	r1, #0
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003498:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800349c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034a0:	4688      	mov	r8, r1
 80034a2:	4691      	mov	r9, r2
 80034a4:	eb1a 0508 	adds.w	r5, sl, r8
 80034a8:	eb4b 0609 	adc.w	r6, fp, r9
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4619      	mov	r1, r3
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	f04f 0400 	mov.w	r4, #0
 80034be:	0094      	lsls	r4, r2, #2
 80034c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034c4:	008b      	lsls	r3, r1, #2
 80034c6:	461a      	mov	r2, r3
 80034c8:	4623      	mov	r3, r4
 80034ca:	4628      	mov	r0, r5
 80034cc:	4631      	mov	r1, r6
 80034ce:	f7fc fedf 	bl	8000290 <__aeabi_uldivmod>
 80034d2:	4603      	mov	r3, r0
 80034d4:	460c      	mov	r4, r1
 80034d6:	461a      	mov	r2, r3
 80034d8:	4bb8      	ldr	r3, [pc, #736]	; (80037bc <UART_SetConfig+0x6f4>)
 80034da:	fba3 2302 	umull	r2, r3, r3, r2
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	469b      	mov	fp, r3
 80034e8:	f04f 0c00 	mov.w	ip, #0
 80034ec:	46d9      	mov	r9, fp
 80034ee:	46e2      	mov	sl, ip
 80034f0:	eb19 0309 	adds.w	r3, r9, r9
 80034f4:	eb4a 040a 	adc.w	r4, sl, sl
 80034f8:	4699      	mov	r9, r3
 80034fa:	46a2      	mov	sl, r4
 80034fc:	eb19 090b 	adds.w	r9, r9, fp
 8003500:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003510:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003514:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003518:	4689      	mov	r9, r1
 800351a:	4692      	mov	sl, r2
 800351c:	eb1b 0509 	adds.w	r5, fp, r9
 8003520:	eb4c 060a 	adc.w	r6, ip, sl
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4619      	mov	r1, r3
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	f04f 0400 	mov.w	r4, #0
 8003536:	0094      	lsls	r4, r2, #2
 8003538:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800353c:	008b      	lsls	r3, r1, #2
 800353e:	461a      	mov	r2, r3
 8003540:	4623      	mov	r3, r4
 8003542:	4628      	mov	r0, r5
 8003544:	4631      	mov	r1, r6
 8003546:	f7fc fea3 	bl	8000290 <__aeabi_uldivmod>
 800354a:	4603      	mov	r3, r0
 800354c:	460c      	mov	r4, r1
 800354e:	461a      	mov	r2, r3
 8003550:	4b9a      	ldr	r3, [pc, #616]	; (80037bc <UART_SetConfig+0x6f4>)
 8003552:	fba3 1302 	umull	r1, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2164      	movs	r1, #100	; 0x64
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	3332      	adds	r3, #50	; 0x32
 8003564:	4a95      	ldr	r2, [pc, #596]	; (80037bc <UART_SetConfig+0x6f4>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003570:	4498      	add	r8, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	469b      	mov	fp, r3
 8003576:	f04f 0c00 	mov.w	ip, #0
 800357a:	46d9      	mov	r9, fp
 800357c:	46e2      	mov	sl, ip
 800357e:	eb19 0309 	adds.w	r3, r9, r9
 8003582:	eb4a 040a 	adc.w	r4, sl, sl
 8003586:	4699      	mov	r9, r3
 8003588:	46a2      	mov	sl, r4
 800358a:	eb19 090b 	adds.w	r9, r9, fp
 800358e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003592:	f04f 0100 	mov.w	r1, #0
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800359e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035a6:	4689      	mov	r9, r1
 80035a8:	4692      	mov	sl, r2
 80035aa:	eb1b 0509 	adds.w	r5, fp, r9
 80035ae:	eb4c 060a 	adc.w	r6, ip, sl
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4619      	mov	r1, r3
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	f04f 0400 	mov.w	r4, #0
 80035c4:	0094      	lsls	r4, r2, #2
 80035c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035ca:	008b      	lsls	r3, r1, #2
 80035cc:	461a      	mov	r2, r3
 80035ce:	4623      	mov	r3, r4
 80035d0:	4628      	mov	r0, r5
 80035d2:	4631      	mov	r1, r6
 80035d4:	f7fc fe5c 	bl	8000290 <__aeabi_uldivmod>
 80035d8:	4603      	mov	r3, r0
 80035da:	460c      	mov	r4, r1
 80035dc:	461a      	mov	r2, r3
 80035de:	4b77      	ldr	r3, [pc, #476]	; (80037bc <UART_SetConfig+0x6f4>)
 80035e0:	fba3 1302 	umull	r1, r3, r3, r2
 80035e4:	095b      	lsrs	r3, r3, #5
 80035e6:	2164      	movs	r1, #100	; 0x64
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	3332      	adds	r3, #50	; 0x32
 80035f2:	4a72      	ldr	r2, [pc, #456]	; (80037bc <UART_SetConfig+0x6f4>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	f003 020f 	and.w	r2, r3, #15
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4442      	add	r2, r8
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	e0d0      	b.n	80037aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003608:	f7ff fc06 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 800360c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	469a      	mov	sl, r3
 8003612:	f04f 0b00 	mov.w	fp, #0
 8003616:	46d0      	mov	r8, sl
 8003618:	46d9      	mov	r9, fp
 800361a:	eb18 0308 	adds.w	r3, r8, r8
 800361e:	eb49 0409 	adc.w	r4, r9, r9
 8003622:	4698      	mov	r8, r3
 8003624:	46a1      	mov	r9, r4
 8003626:	eb18 080a 	adds.w	r8, r8, sl
 800362a:	eb49 090b 	adc.w	r9, r9, fp
 800362e:	f04f 0100 	mov.w	r1, #0
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800363a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800363e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003642:	4688      	mov	r8, r1
 8003644:	4691      	mov	r9, r2
 8003646:	eb1a 0508 	adds.w	r5, sl, r8
 800364a:	eb4b 0609 	adc.w	r6, fp, r9
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4619      	mov	r1, r3
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	f04f 0400 	mov.w	r4, #0
 8003660:	0094      	lsls	r4, r2, #2
 8003662:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003666:	008b      	lsls	r3, r1, #2
 8003668:	461a      	mov	r2, r3
 800366a:	4623      	mov	r3, r4
 800366c:	4628      	mov	r0, r5
 800366e:	4631      	mov	r1, r6
 8003670:	f7fc fe0e 	bl	8000290 <__aeabi_uldivmod>
 8003674:	4603      	mov	r3, r0
 8003676:	460c      	mov	r4, r1
 8003678:	461a      	mov	r2, r3
 800367a:	4b50      	ldr	r3, [pc, #320]	; (80037bc <UART_SetConfig+0x6f4>)
 800367c:	fba3 2302 	umull	r2, r3, r3, r2
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	469b      	mov	fp, r3
 800368a:	f04f 0c00 	mov.w	ip, #0
 800368e:	46d9      	mov	r9, fp
 8003690:	46e2      	mov	sl, ip
 8003692:	eb19 0309 	adds.w	r3, r9, r9
 8003696:	eb4a 040a 	adc.w	r4, sl, sl
 800369a:	4699      	mov	r9, r3
 800369c:	46a2      	mov	sl, r4
 800369e:	eb19 090b 	adds.w	r9, r9, fp
 80036a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036a6:	f04f 0100 	mov.w	r1, #0
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036ba:	4689      	mov	r9, r1
 80036bc:	4692      	mov	sl, r2
 80036be:	eb1b 0509 	adds.w	r5, fp, r9
 80036c2:	eb4c 060a 	adc.w	r6, ip, sl
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4619      	mov	r1, r3
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	f04f 0400 	mov.w	r4, #0
 80036d8:	0094      	lsls	r4, r2, #2
 80036da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036de:	008b      	lsls	r3, r1, #2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4623      	mov	r3, r4
 80036e4:	4628      	mov	r0, r5
 80036e6:	4631      	mov	r1, r6
 80036e8:	f7fc fdd2 	bl	8000290 <__aeabi_uldivmod>
 80036ec:	4603      	mov	r3, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b32      	ldr	r3, [pc, #200]	; (80037bc <UART_SetConfig+0x6f4>)
 80036f4:	fba3 1302 	umull	r1, r3, r3, r2
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	2164      	movs	r1, #100	; 0x64
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	3332      	adds	r3, #50	; 0x32
 8003706:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <UART_SetConfig+0x6f4>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003712:	4498      	add	r8, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	469b      	mov	fp, r3
 8003718:	f04f 0c00 	mov.w	ip, #0
 800371c:	46d9      	mov	r9, fp
 800371e:	46e2      	mov	sl, ip
 8003720:	eb19 0309 	adds.w	r3, r9, r9
 8003724:	eb4a 040a 	adc.w	r4, sl, sl
 8003728:	4699      	mov	r9, r3
 800372a:	46a2      	mov	sl, r4
 800372c:	eb19 090b 	adds.w	r9, r9, fp
 8003730:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003740:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003744:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003748:	4689      	mov	r9, r1
 800374a:	4692      	mov	sl, r2
 800374c:	eb1b 0509 	adds.w	r5, fp, r9
 8003750:	eb4c 060a 	adc.w	r6, ip, sl
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4619      	mov	r1, r3
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	f04f 0400 	mov.w	r4, #0
 8003766:	0094      	lsls	r4, r2, #2
 8003768:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800376c:	008b      	lsls	r3, r1, #2
 800376e:	461a      	mov	r2, r3
 8003770:	4623      	mov	r3, r4
 8003772:	4628      	mov	r0, r5
 8003774:	4631      	mov	r1, r6
 8003776:	f7fc fd8b 	bl	8000290 <__aeabi_uldivmod>
 800377a:	4603      	mov	r3, r0
 800377c:	460c      	mov	r4, r1
 800377e:	461a      	mov	r2, r3
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <UART_SetConfig+0x6f4>)
 8003782:	fba3 1302 	umull	r1, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2164      	movs	r1, #100	; 0x64
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	3332      	adds	r3, #50	; 0x32
 8003794:	4a09      	ldr	r2, [pc, #36]	; (80037bc <UART_SetConfig+0x6f4>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	f003 020f 	and.w	r2, r3, #15
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4442      	add	r2, r8
 80037a6:	609a      	str	r2, [r3, #8]
}
 80037a8:	e7ff      	b.n	80037aa <UART_SetConfig+0x6e2>
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b4:	40011000 	.word	0x40011000
 80037b8:	40011400 	.word	0x40011400
 80037bc:	51eb851f 	.word	0x51eb851f

080037c0 <__errno>:
 80037c0:	4b01      	ldr	r3, [pc, #4]	; (80037c8 <__errno+0x8>)
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	2000000c 	.word	0x2000000c

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	4e0d      	ldr	r6, [pc, #52]	; (8003804 <__libc_init_array+0x38>)
 80037d0:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d2:	1ba4      	subs	r4, r4, r6
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	2500      	movs	r5, #0
 80037d8:	42a5      	cmp	r5, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	4e0b      	ldr	r6, [pc, #44]	; (800380c <__libc_init_array+0x40>)
 80037de:	4c0c      	ldr	r4, [pc, #48]	; (8003810 <__libc_init_array+0x44>)
 80037e0:	f000 fc3a 	bl	8004058 <_init>
 80037e4:	1ba4      	subs	r4, r4, r6
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	2500      	movs	r5, #0
 80037ea:	42a5      	cmp	r5, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037f4:	4798      	blx	r3
 80037f6:	3501      	adds	r5, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037fe:	4798      	blx	r3
 8003800:	3501      	adds	r5, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	08004170 	.word	0x08004170
 8003808:	08004170 	.word	0x08004170
 800380c:	08004170 	.word	0x08004170
 8003810:	08004174 	.word	0x08004174

08003814 <memset>:
 8003814:	4402      	add	r2, r0
 8003816:	4603      	mov	r3, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <sniprintf>:
 8003824:	b40c      	push	{r2, r3}
 8003826:	b530      	push	{r4, r5, lr}
 8003828:	4b17      	ldr	r3, [pc, #92]	; (8003888 <sniprintf+0x64>)
 800382a:	1e0c      	subs	r4, r1, #0
 800382c:	b09d      	sub	sp, #116	; 0x74
 800382e:	681d      	ldr	r5, [r3, #0]
 8003830:	da08      	bge.n	8003844 <sniprintf+0x20>
 8003832:	238b      	movs	r3, #139	; 0x8b
 8003834:	602b      	str	r3, [r5, #0]
 8003836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800383a:	b01d      	add	sp, #116	; 0x74
 800383c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003840:	b002      	add	sp, #8
 8003842:	4770      	bx	lr
 8003844:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003848:	f8ad 3014 	strh.w	r3, [sp, #20]
 800384c:	bf14      	ite	ne
 800384e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003852:	4623      	moveq	r3, r4
 8003854:	9304      	str	r3, [sp, #16]
 8003856:	9307      	str	r3, [sp, #28]
 8003858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800385c:	9002      	str	r0, [sp, #8]
 800385e:	9006      	str	r0, [sp, #24]
 8003860:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003864:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003866:	ab21      	add	r3, sp, #132	; 0x84
 8003868:	a902      	add	r1, sp, #8
 800386a:	4628      	mov	r0, r5
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	f000 f867 	bl	8003940 <_svfiprintf_r>
 8003872:	1c43      	adds	r3, r0, #1
 8003874:	bfbc      	itt	lt
 8003876:	238b      	movlt	r3, #139	; 0x8b
 8003878:	602b      	strlt	r3, [r5, #0]
 800387a:	2c00      	cmp	r4, #0
 800387c:	d0dd      	beq.n	800383a <sniprintf+0x16>
 800387e:	9b02      	ldr	r3, [sp, #8]
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	e7d9      	b.n	800383a <sniprintf+0x16>
 8003886:	bf00      	nop
 8003888:	2000000c 	.word	0x2000000c

0800388c <__ssputs_r>:
 800388c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003890:	688e      	ldr	r6, [r1, #8]
 8003892:	429e      	cmp	r6, r3
 8003894:	4682      	mov	sl, r0
 8003896:	460c      	mov	r4, r1
 8003898:	4690      	mov	r8, r2
 800389a:	4699      	mov	r9, r3
 800389c:	d837      	bhi.n	800390e <__ssputs_r+0x82>
 800389e:	898a      	ldrh	r2, [r1, #12]
 80038a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038a4:	d031      	beq.n	800390a <__ssputs_r+0x7e>
 80038a6:	6825      	ldr	r5, [r4, #0]
 80038a8:	6909      	ldr	r1, [r1, #16]
 80038aa:	1a6f      	subs	r7, r5, r1
 80038ac:	6965      	ldr	r5, [r4, #20]
 80038ae:	2302      	movs	r3, #2
 80038b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80038b8:	f109 0301 	add.w	r3, r9, #1
 80038bc:	443b      	add	r3, r7
 80038be:	429d      	cmp	r5, r3
 80038c0:	bf38      	it	cc
 80038c2:	461d      	movcc	r5, r3
 80038c4:	0553      	lsls	r3, r2, #21
 80038c6:	d530      	bpl.n	800392a <__ssputs_r+0x9e>
 80038c8:	4629      	mov	r1, r5
 80038ca:	f000 fb2b 	bl	8003f24 <_malloc_r>
 80038ce:	4606      	mov	r6, r0
 80038d0:	b950      	cbnz	r0, 80038e8 <__ssputs_r+0x5c>
 80038d2:	230c      	movs	r3, #12
 80038d4:	f8ca 3000 	str.w	r3, [sl]
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038de:	81a3      	strh	r3, [r4, #12]
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e8:	463a      	mov	r2, r7
 80038ea:	6921      	ldr	r1, [r4, #16]
 80038ec:	f000 faa8 	bl	8003e40 <memcpy>
 80038f0:	89a3      	ldrh	r3, [r4, #12]
 80038f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038fa:	81a3      	strh	r3, [r4, #12]
 80038fc:	6126      	str	r6, [r4, #16]
 80038fe:	6165      	str	r5, [r4, #20]
 8003900:	443e      	add	r6, r7
 8003902:	1bed      	subs	r5, r5, r7
 8003904:	6026      	str	r6, [r4, #0]
 8003906:	60a5      	str	r5, [r4, #8]
 8003908:	464e      	mov	r6, r9
 800390a:	454e      	cmp	r6, r9
 800390c:	d900      	bls.n	8003910 <__ssputs_r+0x84>
 800390e:	464e      	mov	r6, r9
 8003910:	4632      	mov	r2, r6
 8003912:	4641      	mov	r1, r8
 8003914:	6820      	ldr	r0, [r4, #0]
 8003916:	f000 fa9e 	bl	8003e56 <memmove>
 800391a:	68a3      	ldr	r3, [r4, #8]
 800391c:	1b9b      	subs	r3, r3, r6
 800391e:	60a3      	str	r3, [r4, #8]
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	441e      	add	r6, r3
 8003924:	6026      	str	r6, [r4, #0]
 8003926:	2000      	movs	r0, #0
 8003928:	e7dc      	b.n	80038e4 <__ssputs_r+0x58>
 800392a:	462a      	mov	r2, r5
 800392c:	f000 fb54 	bl	8003fd8 <_realloc_r>
 8003930:	4606      	mov	r6, r0
 8003932:	2800      	cmp	r0, #0
 8003934:	d1e2      	bne.n	80038fc <__ssputs_r+0x70>
 8003936:	6921      	ldr	r1, [r4, #16]
 8003938:	4650      	mov	r0, sl
 800393a:	f000 faa5 	bl	8003e88 <_free_r>
 800393e:	e7c8      	b.n	80038d2 <__ssputs_r+0x46>

08003940 <_svfiprintf_r>:
 8003940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003944:	461d      	mov	r5, r3
 8003946:	898b      	ldrh	r3, [r1, #12]
 8003948:	061f      	lsls	r7, r3, #24
 800394a:	b09d      	sub	sp, #116	; 0x74
 800394c:	4680      	mov	r8, r0
 800394e:	460c      	mov	r4, r1
 8003950:	4616      	mov	r6, r2
 8003952:	d50f      	bpl.n	8003974 <_svfiprintf_r+0x34>
 8003954:	690b      	ldr	r3, [r1, #16]
 8003956:	b96b      	cbnz	r3, 8003974 <_svfiprintf_r+0x34>
 8003958:	2140      	movs	r1, #64	; 0x40
 800395a:	f000 fae3 	bl	8003f24 <_malloc_r>
 800395e:	6020      	str	r0, [r4, #0]
 8003960:	6120      	str	r0, [r4, #16]
 8003962:	b928      	cbnz	r0, 8003970 <_svfiprintf_r+0x30>
 8003964:	230c      	movs	r3, #12
 8003966:	f8c8 3000 	str.w	r3, [r8]
 800396a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800396e:	e0c8      	b.n	8003b02 <_svfiprintf_r+0x1c2>
 8003970:	2340      	movs	r3, #64	; 0x40
 8003972:	6163      	str	r3, [r4, #20]
 8003974:	2300      	movs	r3, #0
 8003976:	9309      	str	r3, [sp, #36]	; 0x24
 8003978:	2320      	movs	r3, #32
 800397a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800397e:	2330      	movs	r3, #48	; 0x30
 8003980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003984:	9503      	str	r5, [sp, #12]
 8003986:	f04f 0b01 	mov.w	fp, #1
 800398a:	4637      	mov	r7, r6
 800398c:	463d      	mov	r5, r7
 800398e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003992:	b10b      	cbz	r3, 8003998 <_svfiprintf_r+0x58>
 8003994:	2b25      	cmp	r3, #37	; 0x25
 8003996:	d13e      	bne.n	8003a16 <_svfiprintf_r+0xd6>
 8003998:	ebb7 0a06 	subs.w	sl, r7, r6
 800399c:	d00b      	beq.n	80039b6 <_svfiprintf_r+0x76>
 800399e:	4653      	mov	r3, sl
 80039a0:	4632      	mov	r2, r6
 80039a2:	4621      	mov	r1, r4
 80039a4:	4640      	mov	r0, r8
 80039a6:	f7ff ff71 	bl	800388c <__ssputs_r>
 80039aa:	3001      	adds	r0, #1
 80039ac:	f000 80a4 	beq.w	8003af8 <_svfiprintf_r+0x1b8>
 80039b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039b2:	4453      	add	r3, sl
 80039b4:	9309      	str	r3, [sp, #36]	; 0x24
 80039b6:	783b      	ldrb	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 809d 	beq.w	8003af8 <_svfiprintf_r+0x1b8>
 80039be:	2300      	movs	r3, #0
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039c8:	9304      	str	r3, [sp, #16]
 80039ca:	9307      	str	r3, [sp, #28]
 80039cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039d0:	931a      	str	r3, [sp, #104]	; 0x68
 80039d2:	462f      	mov	r7, r5
 80039d4:	2205      	movs	r2, #5
 80039d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80039da:	4850      	ldr	r0, [pc, #320]	; (8003b1c <_svfiprintf_r+0x1dc>)
 80039dc:	f7fc fc08 	bl	80001f0 <memchr>
 80039e0:	9b04      	ldr	r3, [sp, #16]
 80039e2:	b9d0      	cbnz	r0, 8003a1a <_svfiprintf_r+0xda>
 80039e4:	06d9      	lsls	r1, r3, #27
 80039e6:	bf44      	itt	mi
 80039e8:	2220      	movmi	r2, #32
 80039ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039ee:	071a      	lsls	r2, r3, #28
 80039f0:	bf44      	itt	mi
 80039f2:	222b      	movmi	r2, #43	; 0x2b
 80039f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039f8:	782a      	ldrb	r2, [r5, #0]
 80039fa:	2a2a      	cmp	r2, #42	; 0x2a
 80039fc:	d015      	beq.n	8003a2a <_svfiprintf_r+0xea>
 80039fe:	9a07      	ldr	r2, [sp, #28]
 8003a00:	462f      	mov	r7, r5
 8003a02:	2000      	movs	r0, #0
 8003a04:	250a      	movs	r5, #10
 8003a06:	4639      	mov	r1, r7
 8003a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a0c:	3b30      	subs	r3, #48	; 0x30
 8003a0e:	2b09      	cmp	r3, #9
 8003a10:	d94d      	bls.n	8003aae <_svfiprintf_r+0x16e>
 8003a12:	b1b8      	cbz	r0, 8003a44 <_svfiprintf_r+0x104>
 8003a14:	e00f      	b.n	8003a36 <_svfiprintf_r+0xf6>
 8003a16:	462f      	mov	r7, r5
 8003a18:	e7b8      	b.n	800398c <_svfiprintf_r+0x4c>
 8003a1a:	4a40      	ldr	r2, [pc, #256]	; (8003b1c <_svfiprintf_r+0x1dc>)
 8003a1c:	1a80      	subs	r0, r0, r2
 8003a1e:	fa0b f000 	lsl.w	r0, fp, r0
 8003a22:	4318      	orrs	r0, r3
 8003a24:	9004      	str	r0, [sp, #16]
 8003a26:	463d      	mov	r5, r7
 8003a28:	e7d3      	b.n	80039d2 <_svfiprintf_r+0x92>
 8003a2a:	9a03      	ldr	r2, [sp, #12]
 8003a2c:	1d11      	adds	r1, r2, #4
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	9103      	str	r1, [sp, #12]
 8003a32:	2a00      	cmp	r2, #0
 8003a34:	db01      	blt.n	8003a3a <_svfiprintf_r+0xfa>
 8003a36:	9207      	str	r2, [sp, #28]
 8003a38:	e004      	b.n	8003a44 <_svfiprintf_r+0x104>
 8003a3a:	4252      	negs	r2, r2
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	9207      	str	r2, [sp, #28]
 8003a42:	9304      	str	r3, [sp, #16]
 8003a44:	783b      	ldrb	r3, [r7, #0]
 8003a46:	2b2e      	cmp	r3, #46	; 0x2e
 8003a48:	d10c      	bne.n	8003a64 <_svfiprintf_r+0x124>
 8003a4a:	787b      	ldrb	r3, [r7, #1]
 8003a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a4e:	d133      	bne.n	8003ab8 <_svfiprintf_r+0x178>
 8003a50:	9b03      	ldr	r3, [sp, #12]
 8003a52:	1d1a      	adds	r2, r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	9203      	str	r2, [sp, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bfb8      	it	lt
 8003a5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a60:	3702      	adds	r7, #2
 8003a62:	9305      	str	r3, [sp, #20]
 8003a64:	4d2e      	ldr	r5, [pc, #184]	; (8003b20 <_svfiprintf_r+0x1e0>)
 8003a66:	7839      	ldrb	r1, [r7, #0]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f7fc fbc0 	bl	80001f0 <memchr>
 8003a70:	b138      	cbz	r0, 8003a82 <_svfiprintf_r+0x142>
 8003a72:	2340      	movs	r3, #64	; 0x40
 8003a74:	1b40      	subs	r0, r0, r5
 8003a76:	fa03 f000 	lsl.w	r0, r3, r0
 8003a7a:	9b04      	ldr	r3, [sp, #16]
 8003a7c:	4303      	orrs	r3, r0
 8003a7e:	3701      	adds	r7, #1
 8003a80:	9304      	str	r3, [sp, #16]
 8003a82:	7839      	ldrb	r1, [r7, #0]
 8003a84:	4827      	ldr	r0, [pc, #156]	; (8003b24 <_svfiprintf_r+0x1e4>)
 8003a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a8a:	2206      	movs	r2, #6
 8003a8c:	1c7e      	adds	r6, r7, #1
 8003a8e:	f7fc fbaf 	bl	80001f0 <memchr>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d038      	beq.n	8003b08 <_svfiprintf_r+0x1c8>
 8003a96:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <_svfiprintf_r+0x1e8>)
 8003a98:	bb13      	cbnz	r3, 8003ae0 <_svfiprintf_r+0x1a0>
 8003a9a:	9b03      	ldr	r3, [sp, #12]
 8003a9c:	3307      	adds	r3, #7
 8003a9e:	f023 0307 	bic.w	r3, r3, #7
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	9303      	str	r3, [sp, #12]
 8003aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa8:	444b      	add	r3, r9
 8003aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8003aac:	e76d      	b.n	800398a <_svfiprintf_r+0x4a>
 8003aae:	fb05 3202 	mla	r2, r5, r2, r3
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	460f      	mov	r7, r1
 8003ab6:	e7a6      	b.n	8003a06 <_svfiprintf_r+0xc6>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	3701      	adds	r7, #1
 8003abc:	9305      	str	r3, [sp, #20]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	250a      	movs	r5, #10
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ac8:	3a30      	subs	r2, #48	; 0x30
 8003aca:	2a09      	cmp	r2, #9
 8003acc:	d903      	bls.n	8003ad6 <_svfiprintf_r+0x196>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0c8      	beq.n	8003a64 <_svfiprintf_r+0x124>
 8003ad2:	9105      	str	r1, [sp, #20]
 8003ad4:	e7c6      	b.n	8003a64 <_svfiprintf_r+0x124>
 8003ad6:	fb05 2101 	mla	r1, r5, r1, r2
 8003ada:	2301      	movs	r3, #1
 8003adc:	4607      	mov	r7, r0
 8003ade:	e7f0      	b.n	8003ac2 <_svfiprintf_r+0x182>
 8003ae0:	ab03      	add	r3, sp, #12
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	4622      	mov	r2, r4
 8003ae6:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <_svfiprintf_r+0x1ec>)
 8003ae8:	a904      	add	r1, sp, #16
 8003aea:	4640      	mov	r0, r8
 8003aec:	f3af 8000 	nop.w
 8003af0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003af4:	4681      	mov	r9, r0
 8003af6:	d1d6      	bne.n	8003aa6 <_svfiprintf_r+0x166>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	065b      	lsls	r3, r3, #25
 8003afc:	f53f af35 	bmi.w	800396a <_svfiprintf_r+0x2a>
 8003b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b02:	b01d      	add	sp, #116	; 0x74
 8003b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b08:	ab03      	add	r3, sp, #12
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	4622      	mov	r2, r4
 8003b0e:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <_svfiprintf_r+0x1ec>)
 8003b10:	a904      	add	r1, sp, #16
 8003b12:	4640      	mov	r0, r8
 8003b14:	f000 f882 	bl	8003c1c <_printf_i>
 8003b18:	e7ea      	b.n	8003af0 <_svfiprintf_r+0x1b0>
 8003b1a:	bf00      	nop
 8003b1c:	08004134 	.word	0x08004134
 8003b20:	0800413a 	.word	0x0800413a
 8003b24:	0800413e 	.word	0x0800413e
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	0800388d 	.word	0x0800388d

08003b30 <_printf_common>:
 8003b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b34:	4691      	mov	r9, r2
 8003b36:	461f      	mov	r7, r3
 8003b38:	688a      	ldr	r2, [r1, #8]
 8003b3a:	690b      	ldr	r3, [r1, #16]
 8003b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b40:	4293      	cmp	r3, r2
 8003b42:	bfb8      	it	lt
 8003b44:	4613      	movlt	r3, r2
 8003b46:	f8c9 3000 	str.w	r3, [r9]
 8003b4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b4e:	4606      	mov	r6, r0
 8003b50:	460c      	mov	r4, r1
 8003b52:	b112      	cbz	r2, 8003b5a <_printf_common+0x2a>
 8003b54:	3301      	adds	r3, #1
 8003b56:	f8c9 3000 	str.w	r3, [r9]
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	0699      	lsls	r1, r3, #26
 8003b5e:	bf42      	ittt	mi
 8003b60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b64:	3302      	addmi	r3, #2
 8003b66:	f8c9 3000 	strmi.w	r3, [r9]
 8003b6a:	6825      	ldr	r5, [r4, #0]
 8003b6c:	f015 0506 	ands.w	r5, r5, #6
 8003b70:	d107      	bne.n	8003b82 <_printf_common+0x52>
 8003b72:	f104 0a19 	add.w	sl, r4, #25
 8003b76:	68e3      	ldr	r3, [r4, #12]
 8003b78:	f8d9 2000 	ldr.w	r2, [r9]
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	42ab      	cmp	r3, r5
 8003b80:	dc28      	bgt.n	8003bd4 <_printf_common+0xa4>
 8003b82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	3300      	adds	r3, #0
 8003b8a:	bf18      	it	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	0692      	lsls	r2, r2, #26
 8003b90:	d42d      	bmi.n	8003bee <_printf_common+0xbe>
 8003b92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b96:	4639      	mov	r1, r7
 8003b98:	4630      	mov	r0, r6
 8003b9a:	47c0      	blx	r8
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d020      	beq.n	8003be2 <_printf_common+0xb2>
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	68e5      	ldr	r5, [r4, #12]
 8003ba4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ba8:	f003 0306 	and.w	r3, r3, #6
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	bf08      	it	eq
 8003bb0:	1aad      	subeq	r5, r5, r2
 8003bb2:	68a3      	ldr	r3, [r4, #8]
 8003bb4:	6922      	ldr	r2, [r4, #16]
 8003bb6:	bf0c      	ite	eq
 8003bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bbc:	2500      	movne	r5, #0
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	bfc4      	itt	gt
 8003bc2:	1a9b      	subgt	r3, r3, r2
 8003bc4:	18ed      	addgt	r5, r5, r3
 8003bc6:	f04f 0900 	mov.w	r9, #0
 8003bca:	341a      	adds	r4, #26
 8003bcc:	454d      	cmp	r5, r9
 8003bce:	d11a      	bne.n	8003c06 <_printf_common+0xd6>
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	e008      	b.n	8003be6 <_printf_common+0xb6>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4652      	mov	r2, sl
 8003bd8:	4639      	mov	r1, r7
 8003bda:	4630      	mov	r0, r6
 8003bdc:	47c0      	blx	r8
 8003bde:	3001      	adds	r0, #1
 8003be0:	d103      	bne.n	8003bea <_printf_common+0xba>
 8003be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bea:	3501      	adds	r5, #1
 8003bec:	e7c3      	b.n	8003b76 <_printf_common+0x46>
 8003bee:	18e1      	adds	r1, r4, r3
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	2030      	movs	r0, #48	; 0x30
 8003bf4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bf8:	4422      	add	r2, r4
 8003bfa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c02:	3302      	adds	r3, #2
 8003c04:	e7c5      	b.n	8003b92 <_printf_common+0x62>
 8003c06:	2301      	movs	r3, #1
 8003c08:	4622      	mov	r2, r4
 8003c0a:	4639      	mov	r1, r7
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	47c0      	blx	r8
 8003c10:	3001      	adds	r0, #1
 8003c12:	d0e6      	beq.n	8003be2 <_printf_common+0xb2>
 8003c14:	f109 0901 	add.w	r9, r9, #1
 8003c18:	e7d8      	b.n	8003bcc <_printf_common+0x9c>
	...

08003c1c <_printf_i>:
 8003c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c24:	460c      	mov	r4, r1
 8003c26:	7e09      	ldrb	r1, [r1, #24]
 8003c28:	b085      	sub	sp, #20
 8003c2a:	296e      	cmp	r1, #110	; 0x6e
 8003c2c:	4617      	mov	r7, r2
 8003c2e:	4606      	mov	r6, r0
 8003c30:	4698      	mov	r8, r3
 8003c32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c34:	f000 80b3 	beq.w	8003d9e <_printf_i+0x182>
 8003c38:	d822      	bhi.n	8003c80 <_printf_i+0x64>
 8003c3a:	2963      	cmp	r1, #99	; 0x63
 8003c3c:	d036      	beq.n	8003cac <_printf_i+0x90>
 8003c3e:	d80a      	bhi.n	8003c56 <_printf_i+0x3a>
 8003c40:	2900      	cmp	r1, #0
 8003c42:	f000 80b9 	beq.w	8003db8 <_printf_i+0x19c>
 8003c46:	2958      	cmp	r1, #88	; 0x58
 8003c48:	f000 8083 	beq.w	8003d52 <_printf_i+0x136>
 8003c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c54:	e032      	b.n	8003cbc <_printf_i+0xa0>
 8003c56:	2964      	cmp	r1, #100	; 0x64
 8003c58:	d001      	beq.n	8003c5e <_printf_i+0x42>
 8003c5a:	2969      	cmp	r1, #105	; 0x69
 8003c5c:	d1f6      	bne.n	8003c4c <_printf_i+0x30>
 8003c5e:	6820      	ldr	r0, [r4, #0]
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	0605      	lsls	r5, r0, #24
 8003c64:	f103 0104 	add.w	r1, r3, #4
 8003c68:	d52a      	bpl.n	8003cc0 <_printf_i+0xa4>
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6011      	str	r1, [r2, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da03      	bge.n	8003c7a <_printf_i+0x5e>
 8003c72:	222d      	movs	r2, #45	; 0x2d
 8003c74:	425b      	negs	r3, r3
 8003c76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c7a:	486f      	ldr	r0, [pc, #444]	; (8003e38 <_printf_i+0x21c>)
 8003c7c:	220a      	movs	r2, #10
 8003c7e:	e039      	b.n	8003cf4 <_printf_i+0xd8>
 8003c80:	2973      	cmp	r1, #115	; 0x73
 8003c82:	f000 809d 	beq.w	8003dc0 <_printf_i+0x1a4>
 8003c86:	d808      	bhi.n	8003c9a <_printf_i+0x7e>
 8003c88:	296f      	cmp	r1, #111	; 0x6f
 8003c8a:	d020      	beq.n	8003cce <_printf_i+0xb2>
 8003c8c:	2970      	cmp	r1, #112	; 0x70
 8003c8e:	d1dd      	bne.n	8003c4c <_printf_i+0x30>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	f043 0320 	orr.w	r3, r3, #32
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	e003      	b.n	8003ca2 <_printf_i+0x86>
 8003c9a:	2975      	cmp	r1, #117	; 0x75
 8003c9c:	d017      	beq.n	8003cce <_printf_i+0xb2>
 8003c9e:	2978      	cmp	r1, #120	; 0x78
 8003ca0:	d1d4      	bne.n	8003c4c <_printf_i+0x30>
 8003ca2:	2378      	movs	r3, #120	; 0x78
 8003ca4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ca8:	4864      	ldr	r0, [pc, #400]	; (8003e3c <_printf_i+0x220>)
 8003caa:	e055      	b.n	8003d58 <_printf_i+0x13c>
 8003cac:	6813      	ldr	r3, [r2, #0]
 8003cae:	1d19      	adds	r1, r3, #4
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6011      	str	r1, [r2, #0]
 8003cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e08c      	b.n	8003dda <_printf_i+0x1be>
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6011      	str	r1, [r2, #0]
 8003cc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cc8:	bf18      	it	ne
 8003cca:	b21b      	sxthne	r3, r3
 8003ccc:	e7cf      	b.n	8003c6e <_printf_i+0x52>
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	6825      	ldr	r5, [r4, #0]
 8003cd2:	1d18      	adds	r0, r3, #4
 8003cd4:	6010      	str	r0, [r2, #0]
 8003cd6:	0628      	lsls	r0, r5, #24
 8003cd8:	d501      	bpl.n	8003cde <_printf_i+0xc2>
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	e002      	b.n	8003ce4 <_printf_i+0xc8>
 8003cde:	0668      	lsls	r0, r5, #25
 8003ce0:	d5fb      	bpl.n	8003cda <_printf_i+0xbe>
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	4854      	ldr	r0, [pc, #336]	; (8003e38 <_printf_i+0x21c>)
 8003ce6:	296f      	cmp	r1, #111	; 0x6f
 8003ce8:	bf14      	ite	ne
 8003cea:	220a      	movne	r2, #10
 8003cec:	2208      	moveq	r2, #8
 8003cee:	2100      	movs	r1, #0
 8003cf0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cf4:	6865      	ldr	r5, [r4, #4]
 8003cf6:	60a5      	str	r5, [r4, #8]
 8003cf8:	2d00      	cmp	r5, #0
 8003cfa:	f2c0 8095 	blt.w	8003e28 <_printf_i+0x20c>
 8003cfe:	6821      	ldr	r1, [r4, #0]
 8003d00:	f021 0104 	bic.w	r1, r1, #4
 8003d04:	6021      	str	r1, [r4, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d13d      	bne.n	8003d86 <_printf_i+0x16a>
 8003d0a:	2d00      	cmp	r5, #0
 8003d0c:	f040 808e 	bne.w	8003e2c <_printf_i+0x210>
 8003d10:	4665      	mov	r5, ip
 8003d12:	2a08      	cmp	r2, #8
 8003d14:	d10b      	bne.n	8003d2e <_printf_i+0x112>
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	07db      	lsls	r3, r3, #31
 8003d1a:	d508      	bpl.n	8003d2e <_printf_i+0x112>
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	6862      	ldr	r2, [r4, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	bfde      	ittt	le
 8003d24:	2330      	movle	r3, #48	; 0x30
 8003d26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d2a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003d2e:	ebac 0305 	sub.w	r3, ip, r5
 8003d32:	6123      	str	r3, [r4, #16]
 8003d34:	f8cd 8000 	str.w	r8, [sp]
 8003d38:	463b      	mov	r3, r7
 8003d3a:	aa03      	add	r2, sp, #12
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff fef6 	bl	8003b30 <_printf_common>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d14d      	bne.n	8003de4 <_printf_i+0x1c8>
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d4c:	b005      	add	sp, #20
 8003d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d52:	4839      	ldr	r0, [pc, #228]	; (8003e38 <_printf_i+0x21c>)
 8003d54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d58:	6813      	ldr	r3, [r2, #0]
 8003d5a:	6821      	ldr	r1, [r4, #0]
 8003d5c:	1d1d      	adds	r5, r3, #4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6015      	str	r5, [r2, #0]
 8003d62:	060a      	lsls	r2, r1, #24
 8003d64:	d50b      	bpl.n	8003d7e <_printf_i+0x162>
 8003d66:	07ca      	lsls	r2, r1, #31
 8003d68:	bf44      	itt	mi
 8003d6a:	f041 0120 	orrmi.w	r1, r1, #32
 8003d6e:	6021      	strmi	r1, [r4, #0]
 8003d70:	b91b      	cbnz	r3, 8003d7a <_printf_i+0x15e>
 8003d72:	6822      	ldr	r2, [r4, #0]
 8003d74:	f022 0220 	bic.w	r2, r2, #32
 8003d78:	6022      	str	r2, [r4, #0]
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	e7b7      	b.n	8003cee <_printf_i+0xd2>
 8003d7e:	064d      	lsls	r5, r1, #25
 8003d80:	bf48      	it	mi
 8003d82:	b29b      	uxthmi	r3, r3
 8003d84:	e7ef      	b.n	8003d66 <_printf_i+0x14a>
 8003d86:	4665      	mov	r5, ip
 8003d88:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d8c:	fb02 3311 	mls	r3, r2, r1, r3
 8003d90:	5cc3      	ldrb	r3, [r0, r3]
 8003d92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d96:	460b      	mov	r3, r1
 8003d98:	2900      	cmp	r1, #0
 8003d9a:	d1f5      	bne.n	8003d88 <_printf_i+0x16c>
 8003d9c:	e7b9      	b.n	8003d12 <_printf_i+0xf6>
 8003d9e:	6813      	ldr	r3, [r2, #0]
 8003da0:	6825      	ldr	r5, [r4, #0]
 8003da2:	6961      	ldr	r1, [r4, #20]
 8003da4:	1d18      	adds	r0, r3, #4
 8003da6:	6010      	str	r0, [r2, #0]
 8003da8:	0628      	lsls	r0, r5, #24
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	d501      	bpl.n	8003db2 <_printf_i+0x196>
 8003dae:	6019      	str	r1, [r3, #0]
 8003db0:	e002      	b.n	8003db8 <_printf_i+0x19c>
 8003db2:	066a      	lsls	r2, r5, #25
 8003db4:	d5fb      	bpl.n	8003dae <_printf_i+0x192>
 8003db6:	8019      	strh	r1, [r3, #0]
 8003db8:	2300      	movs	r3, #0
 8003dba:	6123      	str	r3, [r4, #16]
 8003dbc:	4665      	mov	r5, ip
 8003dbe:	e7b9      	b.n	8003d34 <_printf_i+0x118>
 8003dc0:	6813      	ldr	r3, [r2, #0]
 8003dc2:	1d19      	adds	r1, r3, #4
 8003dc4:	6011      	str	r1, [r2, #0]
 8003dc6:	681d      	ldr	r5, [r3, #0]
 8003dc8:	6862      	ldr	r2, [r4, #4]
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4628      	mov	r0, r5
 8003dce:	f7fc fa0f 	bl	80001f0 <memchr>
 8003dd2:	b108      	cbz	r0, 8003dd8 <_printf_i+0x1bc>
 8003dd4:	1b40      	subs	r0, r0, r5
 8003dd6:	6060      	str	r0, [r4, #4]
 8003dd8:	6863      	ldr	r3, [r4, #4]
 8003dda:	6123      	str	r3, [r4, #16]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003de2:	e7a7      	b.n	8003d34 <_printf_i+0x118>
 8003de4:	6923      	ldr	r3, [r4, #16]
 8003de6:	462a      	mov	r2, r5
 8003de8:	4639      	mov	r1, r7
 8003dea:	4630      	mov	r0, r6
 8003dec:	47c0      	blx	r8
 8003dee:	3001      	adds	r0, #1
 8003df0:	d0aa      	beq.n	8003d48 <_printf_i+0x12c>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	079b      	lsls	r3, r3, #30
 8003df6:	d413      	bmi.n	8003e20 <_printf_i+0x204>
 8003df8:	68e0      	ldr	r0, [r4, #12]
 8003dfa:	9b03      	ldr	r3, [sp, #12]
 8003dfc:	4298      	cmp	r0, r3
 8003dfe:	bfb8      	it	lt
 8003e00:	4618      	movlt	r0, r3
 8003e02:	e7a3      	b.n	8003d4c <_printf_i+0x130>
 8003e04:	2301      	movs	r3, #1
 8003e06:	464a      	mov	r2, r9
 8003e08:	4639      	mov	r1, r7
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	47c0      	blx	r8
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d09a      	beq.n	8003d48 <_printf_i+0x12c>
 8003e12:	3501      	adds	r5, #1
 8003e14:	68e3      	ldr	r3, [r4, #12]
 8003e16:	9a03      	ldr	r2, [sp, #12]
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	42ab      	cmp	r3, r5
 8003e1c:	dcf2      	bgt.n	8003e04 <_printf_i+0x1e8>
 8003e1e:	e7eb      	b.n	8003df8 <_printf_i+0x1dc>
 8003e20:	2500      	movs	r5, #0
 8003e22:	f104 0919 	add.w	r9, r4, #25
 8003e26:	e7f5      	b.n	8003e14 <_printf_i+0x1f8>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ac      	bne.n	8003d86 <_printf_i+0x16a>
 8003e2c:	7803      	ldrb	r3, [r0, #0]
 8003e2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e36:	e76c      	b.n	8003d12 <_printf_i+0xf6>
 8003e38:	08004145 	.word	0x08004145
 8003e3c:	08004156 	.word	0x08004156

08003e40 <memcpy>:
 8003e40:	b510      	push	{r4, lr}
 8003e42:	1e43      	subs	r3, r0, #1
 8003e44:	440a      	add	r2, r1
 8003e46:	4291      	cmp	r1, r2
 8003e48:	d100      	bne.n	8003e4c <memcpy+0xc>
 8003e4a:	bd10      	pop	{r4, pc}
 8003e4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e54:	e7f7      	b.n	8003e46 <memcpy+0x6>

08003e56 <memmove>:
 8003e56:	4288      	cmp	r0, r1
 8003e58:	b510      	push	{r4, lr}
 8003e5a:	eb01 0302 	add.w	r3, r1, r2
 8003e5e:	d807      	bhi.n	8003e70 <memmove+0x1a>
 8003e60:	1e42      	subs	r2, r0, #1
 8003e62:	4299      	cmp	r1, r3
 8003e64:	d00a      	beq.n	8003e7c <memmove+0x26>
 8003e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e6a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003e6e:	e7f8      	b.n	8003e62 <memmove+0xc>
 8003e70:	4283      	cmp	r3, r0
 8003e72:	d9f5      	bls.n	8003e60 <memmove+0xa>
 8003e74:	1881      	adds	r1, r0, r2
 8003e76:	1ad2      	subs	r2, r2, r3
 8003e78:	42d3      	cmn	r3, r2
 8003e7a:	d100      	bne.n	8003e7e <memmove+0x28>
 8003e7c:	bd10      	pop	{r4, pc}
 8003e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e82:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003e86:	e7f7      	b.n	8003e78 <memmove+0x22>

08003e88 <_free_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	4605      	mov	r5, r0
 8003e8c:	2900      	cmp	r1, #0
 8003e8e:	d045      	beq.n	8003f1c <_free_r+0x94>
 8003e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e94:	1f0c      	subs	r4, r1, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bfb8      	it	lt
 8003e9a:	18e4      	addlt	r4, r4, r3
 8003e9c:	f000 f8d2 	bl	8004044 <__malloc_lock>
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <_free_r+0x98>)
 8003ea2:	6813      	ldr	r3, [r2, #0]
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	b933      	cbnz	r3, 8003eb6 <_free_r+0x2e>
 8003ea8:	6063      	str	r3, [r4, #4]
 8003eaa:	6014      	str	r4, [r2, #0]
 8003eac:	4628      	mov	r0, r5
 8003eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eb2:	f000 b8c8 	b.w	8004046 <__malloc_unlock>
 8003eb6:	42a3      	cmp	r3, r4
 8003eb8:	d90c      	bls.n	8003ed4 <_free_r+0x4c>
 8003eba:	6821      	ldr	r1, [r4, #0]
 8003ebc:	1862      	adds	r2, r4, r1
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	bf04      	itt	eq
 8003ec2:	681a      	ldreq	r2, [r3, #0]
 8003ec4:	685b      	ldreq	r3, [r3, #4]
 8003ec6:	6063      	str	r3, [r4, #4]
 8003ec8:	bf04      	itt	eq
 8003eca:	1852      	addeq	r2, r2, r1
 8003ecc:	6022      	streq	r2, [r4, #0]
 8003ece:	6004      	str	r4, [r0, #0]
 8003ed0:	e7ec      	b.n	8003eac <_free_r+0x24>
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	b10a      	cbz	r2, 8003edc <_free_r+0x54>
 8003ed8:	42a2      	cmp	r2, r4
 8003eda:	d9fa      	bls.n	8003ed2 <_free_r+0x4a>
 8003edc:	6819      	ldr	r1, [r3, #0]
 8003ede:	1858      	adds	r0, r3, r1
 8003ee0:	42a0      	cmp	r0, r4
 8003ee2:	d10b      	bne.n	8003efc <_free_r+0x74>
 8003ee4:	6820      	ldr	r0, [r4, #0]
 8003ee6:	4401      	add	r1, r0
 8003ee8:	1858      	adds	r0, r3, r1
 8003eea:	4282      	cmp	r2, r0
 8003eec:	6019      	str	r1, [r3, #0]
 8003eee:	d1dd      	bne.n	8003eac <_free_r+0x24>
 8003ef0:	6810      	ldr	r0, [r2, #0]
 8003ef2:	6852      	ldr	r2, [r2, #4]
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	4401      	add	r1, r0
 8003ef8:	6019      	str	r1, [r3, #0]
 8003efa:	e7d7      	b.n	8003eac <_free_r+0x24>
 8003efc:	d902      	bls.n	8003f04 <_free_r+0x7c>
 8003efe:	230c      	movs	r3, #12
 8003f00:	602b      	str	r3, [r5, #0]
 8003f02:	e7d3      	b.n	8003eac <_free_r+0x24>
 8003f04:	6820      	ldr	r0, [r4, #0]
 8003f06:	1821      	adds	r1, r4, r0
 8003f08:	428a      	cmp	r2, r1
 8003f0a:	bf04      	itt	eq
 8003f0c:	6811      	ldreq	r1, [r2, #0]
 8003f0e:	6852      	ldreq	r2, [r2, #4]
 8003f10:	6062      	str	r2, [r4, #4]
 8003f12:	bf04      	itt	eq
 8003f14:	1809      	addeq	r1, r1, r0
 8003f16:	6021      	streq	r1, [r4, #0]
 8003f18:	605c      	str	r4, [r3, #4]
 8003f1a:	e7c7      	b.n	8003eac <_free_r+0x24>
 8003f1c:	bd38      	pop	{r3, r4, r5, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000090 	.word	0x20000090

08003f24 <_malloc_r>:
 8003f24:	b570      	push	{r4, r5, r6, lr}
 8003f26:	1ccd      	adds	r5, r1, #3
 8003f28:	f025 0503 	bic.w	r5, r5, #3
 8003f2c:	3508      	adds	r5, #8
 8003f2e:	2d0c      	cmp	r5, #12
 8003f30:	bf38      	it	cc
 8003f32:	250c      	movcc	r5, #12
 8003f34:	2d00      	cmp	r5, #0
 8003f36:	4606      	mov	r6, r0
 8003f38:	db01      	blt.n	8003f3e <_malloc_r+0x1a>
 8003f3a:	42a9      	cmp	r1, r5
 8003f3c:	d903      	bls.n	8003f46 <_malloc_r+0x22>
 8003f3e:	230c      	movs	r3, #12
 8003f40:	6033      	str	r3, [r6, #0]
 8003f42:	2000      	movs	r0, #0
 8003f44:	bd70      	pop	{r4, r5, r6, pc}
 8003f46:	f000 f87d 	bl	8004044 <__malloc_lock>
 8003f4a:	4a21      	ldr	r2, [pc, #132]	; (8003fd0 <_malloc_r+0xac>)
 8003f4c:	6814      	ldr	r4, [r2, #0]
 8003f4e:	4621      	mov	r1, r4
 8003f50:	b991      	cbnz	r1, 8003f78 <_malloc_r+0x54>
 8003f52:	4c20      	ldr	r4, [pc, #128]	; (8003fd4 <_malloc_r+0xb0>)
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	b91b      	cbnz	r3, 8003f60 <_malloc_r+0x3c>
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f000 f863 	bl	8004024 <_sbrk_r>
 8003f5e:	6020      	str	r0, [r4, #0]
 8003f60:	4629      	mov	r1, r5
 8003f62:	4630      	mov	r0, r6
 8003f64:	f000 f85e 	bl	8004024 <_sbrk_r>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d124      	bne.n	8003fb6 <_malloc_r+0x92>
 8003f6c:	230c      	movs	r3, #12
 8003f6e:	6033      	str	r3, [r6, #0]
 8003f70:	4630      	mov	r0, r6
 8003f72:	f000 f868 	bl	8004046 <__malloc_unlock>
 8003f76:	e7e4      	b.n	8003f42 <_malloc_r+0x1e>
 8003f78:	680b      	ldr	r3, [r1, #0]
 8003f7a:	1b5b      	subs	r3, r3, r5
 8003f7c:	d418      	bmi.n	8003fb0 <_malloc_r+0x8c>
 8003f7e:	2b0b      	cmp	r3, #11
 8003f80:	d90f      	bls.n	8003fa2 <_malloc_r+0x7e>
 8003f82:	600b      	str	r3, [r1, #0]
 8003f84:	50cd      	str	r5, [r1, r3]
 8003f86:	18cc      	adds	r4, r1, r3
 8003f88:	4630      	mov	r0, r6
 8003f8a:	f000 f85c 	bl	8004046 <__malloc_unlock>
 8003f8e:	f104 000b 	add.w	r0, r4, #11
 8003f92:	1d23      	adds	r3, r4, #4
 8003f94:	f020 0007 	bic.w	r0, r0, #7
 8003f98:	1ac3      	subs	r3, r0, r3
 8003f9a:	d0d3      	beq.n	8003f44 <_malloc_r+0x20>
 8003f9c:	425a      	negs	r2, r3
 8003f9e:	50e2      	str	r2, [r4, r3]
 8003fa0:	e7d0      	b.n	8003f44 <_malloc_r+0x20>
 8003fa2:	428c      	cmp	r4, r1
 8003fa4:	684b      	ldr	r3, [r1, #4]
 8003fa6:	bf16      	itet	ne
 8003fa8:	6063      	strne	r3, [r4, #4]
 8003faa:	6013      	streq	r3, [r2, #0]
 8003fac:	460c      	movne	r4, r1
 8003fae:	e7eb      	b.n	8003f88 <_malloc_r+0x64>
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	6849      	ldr	r1, [r1, #4]
 8003fb4:	e7cc      	b.n	8003f50 <_malloc_r+0x2c>
 8003fb6:	1cc4      	adds	r4, r0, #3
 8003fb8:	f024 0403 	bic.w	r4, r4, #3
 8003fbc:	42a0      	cmp	r0, r4
 8003fbe:	d005      	beq.n	8003fcc <_malloc_r+0xa8>
 8003fc0:	1a21      	subs	r1, r4, r0
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f000 f82e 	bl	8004024 <_sbrk_r>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d0cf      	beq.n	8003f6c <_malloc_r+0x48>
 8003fcc:	6025      	str	r5, [r4, #0]
 8003fce:	e7db      	b.n	8003f88 <_malloc_r+0x64>
 8003fd0:	20000090 	.word	0x20000090
 8003fd4:	20000094 	.word	0x20000094

08003fd8 <_realloc_r>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	4607      	mov	r7, r0
 8003fdc:	4614      	mov	r4, r2
 8003fde:	460e      	mov	r6, r1
 8003fe0:	b921      	cbnz	r1, 8003fec <_realloc_r+0x14>
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fe8:	f7ff bf9c 	b.w	8003f24 <_malloc_r>
 8003fec:	b922      	cbnz	r2, 8003ff8 <_realloc_r+0x20>
 8003fee:	f7ff ff4b 	bl	8003e88 <_free_r>
 8003ff2:	4625      	mov	r5, r4
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ff8:	f000 f826 	bl	8004048 <_malloc_usable_size_r>
 8003ffc:	42a0      	cmp	r0, r4
 8003ffe:	d20f      	bcs.n	8004020 <_realloc_r+0x48>
 8004000:	4621      	mov	r1, r4
 8004002:	4638      	mov	r0, r7
 8004004:	f7ff ff8e 	bl	8003f24 <_malloc_r>
 8004008:	4605      	mov	r5, r0
 800400a:	2800      	cmp	r0, #0
 800400c:	d0f2      	beq.n	8003ff4 <_realloc_r+0x1c>
 800400e:	4631      	mov	r1, r6
 8004010:	4622      	mov	r2, r4
 8004012:	f7ff ff15 	bl	8003e40 <memcpy>
 8004016:	4631      	mov	r1, r6
 8004018:	4638      	mov	r0, r7
 800401a:	f7ff ff35 	bl	8003e88 <_free_r>
 800401e:	e7e9      	b.n	8003ff4 <_realloc_r+0x1c>
 8004020:	4635      	mov	r5, r6
 8004022:	e7e7      	b.n	8003ff4 <_realloc_r+0x1c>

08004024 <_sbrk_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4c06      	ldr	r4, [pc, #24]	; (8004040 <_sbrk_r+0x1c>)
 8004028:	2300      	movs	r3, #0
 800402a:	4605      	mov	r5, r0
 800402c:	4608      	mov	r0, r1
 800402e:	6023      	str	r3, [r4, #0]
 8004030:	f7fc fe50 	bl	8000cd4 <_sbrk>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_sbrk_r+0x1a>
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	b103      	cbz	r3, 800403e <_sbrk_r+0x1a>
 800403c:	602b      	str	r3, [r5, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	2000018c 	.word	0x2000018c

08004044 <__malloc_lock>:
 8004044:	4770      	bx	lr

08004046 <__malloc_unlock>:
 8004046:	4770      	bx	lr

08004048 <_malloc_usable_size_r>:
 8004048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800404c:	1f18      	subs	r0, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	bfbc      	itt	lt
 8004052:	580b      	ldrlt	r3, [r1, r0]
 8004054:	18c0      	addlt	r0, r0, r3
 8004056:	4770      	bx	lr

08004058 <_init>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr

08004064 <_fini>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr
